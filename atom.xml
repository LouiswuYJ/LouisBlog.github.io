<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis Wu&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://louiswuyj.site/"/>
  <updated>2020-09-19T08:48:58.377Z</updated>
  <id>https://louiswuyj.site/</id>
  
  <author>
    <name>Louis Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何把 iterm2 oh-my-zsh 的路徑變短</title>
    <link href="https://louiswuyj.site/%E5%A6%82%E4%BD%95%E6%8A%8A%20iterm2%20oh-my-zsh%20%E7%9A%84%E8%B7%AF%E5%BE%91%E8%AE%8A%E7%9F%AD/"/>
    <id>https://louiswuyj.site/如何把 iterm2 oh-my-zsh 的路徑變短/</id>
    <published>2019-11-15T04:10:40.000Z</published>
    <updated>2020-09-19T08:48:58.377Z</updated>
    
    <content type="html"><![CDATA[<p>若擔心改壞的話，建議可以先備份原始的 agnoster.zsh-theme 檔後再進行編輯。</p><p>查了很多方法都不可行，後來發現只要按照以下步驟的話，就可以順利把路徑縮短。</p><a id="more"></a><h3 id="步驟1-找到-oh-my-zsh-themes-資料夾"><a href="#步驟1-找到-oh-my-zsh-themes-資料夾" class="headerlink" title="步驟1. 找到 .oh-my-zsh/themes 資料夾"></a>步驟1. 找到 .oh-my-zsh/themes 資料夾</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/.oh-my-zsh/themes</span><br></pre></td></tr></table></figure><h3 id="步驟2-打開-themes-資料夾底下的-agnoster-zsh-theme-文件檔"><a href="#步驟2-打開-themes-資料夾底下的-agnoster-zsh-theme-文件檔" class="headerlink" title="步驟2. 打開 themes 資料夾底下的 agnoster.zsh-theme (文件檔)"></a>步驟2. 打開 themes 資料夾底下的 agnoster.zsh-theme (文件檔)</h3><p>看個人習慣要用vim開還是一般的文字編輯器都可以:</p><h3 id="步驟3-找到-prompt-dir-並加入數字"><a href="#步驟3-找到-prompt-dir-並加入數字" class="headerlink" title="步驟3. 找到 prompt_dir() 並加入數字"></a>步驟3. 找到 prompt_dir() 並加入數字</h3><p>原始:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dir: current working directory</span></span><br><span class="line"><span class="function"><span class="title">prompt_dir</span></span>() &#123;</span><br><span class="line">  prompt_segment blue <span class="variable">$CURRENT_FG</span> <span class="string">'%~'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="數字1-代表顯示1層"><a href="#數字1-代表顯示1層" class="headerlink" title="數字1: 代表顯示1層"></a>數字1: 代表顯示1層</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dir: current working directory</span></span><br><span class="line"><span class="function"><span class="title">prompt_dir</span></span>() &#123;</span><br><span class="line"><span class="comment"># prompt_segment blue $CURRENT_FG '%~'</span></span><br><span class="line">  prompt_segment blue <span class="variable">$CURRENT_FG</span> <span class="string">'%1~'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4PaQBqx.png" alt=""></p><h4 id="數字2-代表顯示2層"><a href="#數字2-代表顯示2層" class="headerlink" title="數字2: 代表顯示2層"></a>數字2: 代表顯示2層</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dir: current working directory</span></span><br><span class="line"><span class="function"><span class="title">prompt_dir</span></span>() &#123;</span><br><span class="line"><span class="comment"># prompt_segment blue $CURRENT_FG '%~'</span></span><br><span class="line">  prompt_segment blue <span class="variable">$CURRENT_FG</span> <span class="string">'%2~'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/cPwh3Sr.png" alt=""></p><p>以此類推</p><p>參考資料：<br><a href="https://medium.com/@shandou/how-to-shorten-zsh-prompt-oh-my-zsh-14185f3e7ab7" target="_blank" rel="noopener">How to shorten zsh prompt (oh my zsh)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;若擔心改壞的話，建議可以先備份原始的 agnoster.zsh-theme 檔後再進行編輯。&lt;/p&gt;
&lt;p&gt;查了很多方法都不可行，後來發現只要按照以下步驟的話，就可以順利把路徑縮短。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Day30: 我竟然完賽了？</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2030/"/>
    <id>https://louiswuyj.site/鐵人賽Day 30/</id>
    <published>2019-10-13T04:10:40.000Z</published>
    <updated>2020-09-19T08:49:05.235Z</updated>
    
    <content type="html"><![CDATA[<p>在這裡，我要感謝我的父母#%#$@!@^&amp;（誤</p><p>看第1天的“參賽起始文”，還清楚記得發文當下的感覺：</p><a id="more"></a><h3 id="“我自己真的能做到嗎？”"><a href="#“我自己真的能做到嗎？”" class="headerlink" title="“我自己真的能做到嗎？”"></a>“我自己真的能做到嗎？”</h3><p>寫到了第30天，真的不敢相信自己竟然真的完賽了!? 過程中真的頗痛苦，但好像已經默默的養成每天早上起來看文件的習慣，說進步嗎..?</p><p>或許有、或許沒有，至少證實了一句話：</p><blockquote><p>「時間就像擠乳溝，硬擠一下就有了。」</p></blockquote><p>這30篇文章有很多可以改進跟修正的地方(尤其廢文)，還好這次是報名自我挑戰組，心態上也比較不一樣，也許明年挑戰Mordern Web組的時候又是另一個挑戰跟態度了吧！(什麼..你竟然還想再挑戰？)</p><p>這次雖然有完賽，其實不能說都是靠自己的力量，回頭想想，如果沒有身邊夥伴的互相鼓勵跟支持，我覺得只靠我自己是不可能完賽的，很感謝他們。</p><p>說到夥伴們就覺得感慨，在五倍這邊也只剩下不到一週的時間就要結束了，雖然這裡是鐵人賽，但就像第1天說的，就當是寫給自己看的。</p><p>如果沒有“某菜”每天的嘴砲注入點活力，也許我不會走到現在。<br>如果沒有“某叔”在CRUD時耐心教我，我想我應該早就放棄了。<br>如果沒有“某聰”對於程式的求知慾，我想我對於寫程式應該不會感到有興趣。<br>如果沒有“某凡”逆流而上的態度，我應該早就被壓力擊垮了。<br>如果沒有“某尼”的強大，我就不會意識到自己離車尾燈還有多麼遙遠。</p><p><strong>(夥伴、饅頭真的真的在這行很重要啊!!!)</strong></p><p>五倍Astrocamp跟鐵人賽的結束，只是一個「進入新手村」開始，我才剛創建好角色準備踏入而已，期許自己幾年後回頭看看現在的自己會忍不住大噴一番XD</p><p>鐵人賽，我們明年見！</p><blockquote><p>“Would you like me to give you a formula for success? It’s quite simple, really. Double your rate of failure. You’re thinking of failure as the enemy of success. But it isn’t at all… You can be discouraged by failure – or you can learn from it. So go ahead and make mistakes. Make all you can. Because, remember that’s where you’ll find success. On the far side.”</p><p>– Thomas J. Watson, Founder of IBM</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在這裡，我要感謝我的父母#%#$@!@^&amp;amp;（誤&lt;/p&gt;
&lt;p&gt;看第1天的“參賽起始文”，還清楚記得發文當下的感覺：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day29: Rails - Active Storage</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2029/"/>
    <id>https://louiswuyj.site/鐵人賽Day 29/</id>
    <published>2019-10-12T04:10:40.000Z</published>
    <updated>2020-09-19T08:48:37.124Z</updated>
    
    <content type="html"><![CDATA[<p>最近做專案遇到了上傳檔案的問題，想針對這個主題簡單的做個介紹。</p><a id="more"></a><h2 id="Active-Storage"><a href="#Active-Storage" class="headerlink" title="Active Storage"></a>Active Storage</h2><blockquote><p>Active Storage可以將文件上傳到Amazon S3，Google Cloud Storage或Microsoft Azure Storage等雲存儲服務，並將這些文件附加到Active Record。</p><p>它是一個可以用於開發或測試的服務，並可將文件進行備份和遷移。</p><p>其中，使用Active Storage，可以使用ImageMagick轉換圖像上傳，上傳非圖像或圖像（如PDF或影片）的檔案，並可任意從文件中存取。</p><p>by Rails Guide-Active Storage Overview</p></blockquote><p>據 Rails 官方文件說明，Active Storage 是在 Rails 5.2版後才推出的功能，在它之前似乎多數人都使用 Paperclip 及 CarrierWave，這次將會已上傳圖片為例來做說明。</p><p>在開始之前，得先在終端機執行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rails active_storage:install</span><br><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure><p>第一行會產生兩個table的migration：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This migration comes from active_storage (originally 20170806125915)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateActiveStorageTables</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:active_storage_blobs</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string   <span class="symbol">:key</span>,        <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">      t.string   <span class="symbol">:filename</span>,   <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">      t.string   <span class="symbol">:content_type</span></span><br><span class="line">      t.text     <span class="symbol">:metadata</span></span><br><span class="line">      t.bigint   <span class="symbol">:byte_size</span>,  <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">      t.string   <span class="symbol">:checksum</span>,   <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">      t.datetime <span class="symbol">:created_at</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      t.index [ <span class="symbol">:key</span> ], <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    create_table <span class="symbol">:active_storage_attachments</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      t.string     <span class="symbol">:name</span>,     <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line">      t.references <span class="symbol">:record</span>,   <span class="symbol">null:</span> <span class="literal">false</span>, <span class="symbol">polymorphic:</span> <span class="literal">true</span>, <span class="symbol">index:</span> <span class="literal">false</span></span><br><span class="line">      t.references <span class="symbol">:blob</span>,     <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      t.datetime <span class="symbol">:created_at</span>, <span class="symbol">null:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      t.index [ <span class="symbol">:record_type</span>, <span class="symbol">:record_id</span>, <span class="symbol">:name</span>, <span class="symbol">:blob_id</span> ], <span class="symbol">name:</span> <span class="string">"index_active_storage_attachments_uniqueness"</span>, <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">      t.foreign_key <span class="symbol">:active_storage_blobs</span>, <span class="symbol">column:</span> <span class="symbol">:blob_id</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>db:migrate之後，就可以看到 schema.rb 已新增兩個 table：</p><p><code>active_storage_blobs</code>: 存放附檔資訊<br><code>active_storage_attachments</code>: 存放附檔和 model 的關聯</p><p>其中附加檔案的方式有分成一個 model 一個檔案或甚至多個檔案，我們先已有個food model舉例：</p><h2 id="一個食物一個檔案"><a href="#一個食物一個檔案" class="headerlink" title="一個食物一個檔案"></a>一個食物一個檔案</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_one_attached <span class="symbol">:avatar</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其實在schema裡是看不到avatar這個欄位，可以想成是“虛擬欄位的概念”。</p><p><img src="https://i.imgur.com/0NelClW.png" alt=""></p><p>如果要做個可以上傳的表單的話，可以利用 form_for來實現：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#<span class="doctag">@foods</span> = Food.all</span></span><br><span class="line">&lt;%= form_for(@foods) <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%= form.label <span class="symbol">:avatar</span>, <span class="string">'檔案上傳'</span>,</span><br><span class="line">  &lt;%= form.file_field <span class="symbol">:avatar%&gt;</span></span><br><span class="line"><span class="comment">#下略</span></span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><h4 id="Strong-parameter"><a href="#Strong-parameter" class="headerlink" title="Strong parameter"></a>Strong parameter</h4><p>只要是丟資料到網站上，都需要permit才可以，故要在params的地方也要記得要加上:avatar去permit。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_params</span></span></span><br><span class="line">  params.<span class="keyword">require</span>(<span class="symbol">:food</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:address</span>, <span class="symbol">:phone</span>, <span class="symbol">:quantity</span>, <span class="symbol">:origin_price</span>, <span class="symbol">:discount_price</span>, <span class="symbol">:pickup_time</span>, <span class="symbol">:picture</span>, <span class="symbol">:description</span>, <span class="symbol">:endup_time</span>, <span class="symbol">:avatar</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>要新增檔案可以用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">food.avatar.attach(params[<span class="symbol">:avatar</span>])</span><br></pre></td></tr></table></figure><p>若要確定是否有附加檔案的話，可以用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">food.avatar.attached?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回傳boolean值</span></span><br></pre></td></tr></table></figure><h2 id="一個食物多個檔案"><a href="#一個食物多個檔案" class="headerlink" title="一個食物多個檔案"></a>一個食物多個檔案</h2><p>差異其實只有兩個：</p><p>改成has_many_attached</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line"> <span class="comment">#has_one_attached :avatar</span></span><br><span class="line">  has_many_attached <span class="symbol">:avatars</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>改成陣列型式avatars:[]</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_params</span></span></span><br><span class="line">  params.<span class="keyword">require</span>(<span class="symbol">:food</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:address</span>, <span class="symbol">:phone</span>, <span class="symbol">:quantity</span>, <span class="symbol">:origin_price</span>, <span class="symbol">:discount_price</span>, <span class="symbol">:pickup_time</span>, <span class="symbol">:picture</span>, <span class="symbol">:description</span>, <span class="symbol">:endup_time</span>, <span class="symbol">avatars:</span>[])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>關於“新增檔案”及“確定是否有附加檔案”的方式是一樣的，只是記得avatar要用複數形式(avatars)</p><p>附加完檔案了，如果是照片的話要如何顯示呢？</p><h2 id="mini-magick"><a href="#mini-magick" class="headerlink" title="mini_magick"></a>mini_magick</h2><p>在Rails的 Gemfile 其實有內建一個套件 mini_magick，若要做圖片顯示的效果，可以把註解拿掉 bundle 後就可以用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Gemfile</span><br><span class="line"># Use ActiveStorage variant</span><br><span class="line">gem &apos;mini_magick&apos;, &apos;~&gt; 4.8&apos;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= image_tag food.avatar.variant(<span class="symbol">resize:</span> <span class="string">'300x300'</span>), <span class="keyword">if</span> food.avatar.attached?%&gt;</span><br></pre></td></tr></table></figure><p><code>variant</code>方法是用來改變上傳的圖片尺寸<br><code>if food.avatar.attached?</code> 有附加檔案的話就印出圖片。</p><p>如果沒有加上這個判斷的話，今天頁面的某個檔案若剛好沒有附加檔案，就會噴錯，原因是“<code>food.avatar</code>是<code>nil</code>，不能對<code>nil</code>做<code>variant</code>方法”。</p><p>參考資料：</p><p><a href="https://guides.rubyonrails.org/active_storage_overview.html#attaching-files-to-records" target="_blank" rel="noopener">Rails Guides - Active Storage Overview</a><br><a href="https://5xruby.tw/posts/active-storage-review/" target="_blank" rel="noopener">Active Storage 開箱文</a><br><a href="https://pjchender.github.io/2018/05/25/rails-active-storage-overview/" target="_blank" rel="noopener">[Rails] Active Storage Overview</a></p><blockquote><p>“Don’t worry about failure; you only have to be right once.”</p><p>— Drew Houston, Entrepreneur</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做專案遇到了上傳檔案的問題，想針對這個主題簡單的做個介紹。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day28: 用個Github來版本控制吧 </title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2028/"/>
    <id>https://louiswuyj.site/鐵人賽Day 28/</id>
    <published>2019-10-11T04:10:40.000Z</published>
    <updated>2020-09-19T08:51:06.582Z</updated>
    
    <content type="html"><![CDATA[<p>之前都在寫Rails相關的內容，其實版本控制也是重要的一環，就來換個口味寫個GitHub吧～</p><p>登入GitHub後第一步</p><p><img src="https://i.imgur.com/ftmo3TA.png" alt=""></p><a id="more"></a><p>加號點開後，請點選紅框 <code>New repository</code> 新增專案</p><p><img src="https://i.imgur.com/d1apkB8.png" alt=""></p><p>輸入自訂的檔名，依照你想要公開(Public)或私人(Private)去選擇後，按下方 <code>Create repository</code></p><p><img src="https://i.imgur.com/SC05mA2.png" alt=""></p><p>選擇透過 HTTPS / SSH 的方式來上傳檔案</p><blockquote><p>HTTPS是加密網站，使用上囉嗦(每次都要輸入帳密)但設定上簡單。<br>SSH則是公鑰跟私鑰，但這設定上要key一些指令，這不是此次討論的範圍，有興趣請點<a href="https://git-scm.com/book/zh-tw/v1/%E4%BC%BA%E6%9C%8D%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0" target="_blank" rel="noopener">這裡</a>設定。</p></blockquote><p>Create a new repository 顧名思義就是直接產生一個新的專案，而 Push an exisiting repository 意思是與直接本地端的專案做版控，此次我們選擇後者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/LouiswuYJ/testing.git</span><br><span class="line">     遠端   新增 代名詞                   位置</span><br><span class="line">-&gt; 將本地端的git版本整包與GitHub上連結</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br><span class="line">             代名詞  分支</span><br><span class="line">-&gt; 新增一個代名詞節點，這裡的-u 代表設定上線(upstream)，把自己本地端的分支(master)推到網站上，且u設定一次之後，orign 就已經變成預設值，所以以後只要git push 即可。</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line">-&gt;查看remote狀況</span><br></pre></td></tr></table></figure><p>再開始之前，先隨便找一個有git版控的檔案，若沒有的話再建一個就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">開終端機到指定資料夾後:</span><br><span class="line">git init    -&gt; 初始化</span><br><span class="line">touch 檔案  -&gt;新增檔案</span><br><span class="line">git add .  -&gt;將全部檔案 add</span><br><span class="line">git commit -m &quot;自訂&quot; -&gt;commit後產生第一個分支</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5Ryj38E.png" alt=""></p><p>本地端我先設2個(commit)節點後，下上述兩個指令後就會與GitHub上做連結。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/LouiswuYJ/testing.git</span><br><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: 5, done.</span><br><span class="line">Counting objects: 100% (5/5), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (5/5), 407 bytes | 135.00 KiB/s, done.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/LouiswuYJ/testing.git</span><br><span class="line">* [new branch]      master -&gt; master</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3v9qw0k.png" alt=""></p><h2 id="git-push-從本地推上遠端"><a href="#git-push-從本地推上遠端" class="headerlink" title="git push (從本地推上遠端)"></a>git push (從本地推上遠端)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line">git push -f</span><br><span class="line">直接檔案蓋掉全部，建議要用之前最好先告知你的其他團隊成員，不然就...</span><br></pre></td></tr></table></figure><p>新增了檔案03.html並commit後push到Github，本地端的 master 分支，推上GitHub origin 這個遠端節點，並且在遠端形成一個 master 分支，原本GitHub上的2個commit就變3個了。</p><p><img src="https://i.imgur.com/mVaySeB.png" alt=""></p><p><img src="https://i.imgur.com/CwI0e7O.png" alt=""></p><h2 id="git-fetch-從遠端抓下來"><a href="#git-fetch-從遠端抓下來" class="headerlink" title="git fetch (從遠端抓下來)"></a>git fetch (從遠端抓下來)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br></pre></td></tr></table></figure><p>去 origin 這個遠端節點，抓上面 master 分支的內容，並且在我的電腦上建立一個 origin/master 分支，但並不會merge。<br>(白話文:把檔案抓過來，但不會主動合併)<br>情境1: 新增一個檔案後儲存commit變4個，此時用 fetch 後本地就會如下圖所示。</p><p><img src="https://i.imgur.com/GqT3TDL.png" alt=""></p><p>情境2:<br>這邊看到一個origin/master的節點(fetch抓下來)</p><p><img src="https://i.imgur.com/yxvAI9g.png" alt=""></p><p>這時候去merge，就會變這樣</p><p><img src="https://i.imgur.com/7HMQusr.png" alt=""></p><h2 id="git-pull-git-fetch-git-merge"><a href="#git-pull-git-fetch-git-merge" class="headerlink" title="git pull = git fetch + git merge"></a>git pull = git fetch + git merge</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>去 origin 這個遠端節點，去抓上面 master 分支的內容，並且在電腦上建立一個 origin/master 分支，同時與我本機的 master 分支進行合併<br>白話文: git pull 就是 fetch後再merge的結果。</p><h2 id="git-clone-Git網址"><a href="#git-clone-Git網址" class="headerlink" title="git clone + Git網址"></a>git clone + Git網址</h2><p>把某個 Git 專案，整包檔案完整複製到自己電腦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 網址</span><br></pre></td></tr></table></figure><h2 id="共同合作"><a href="#共同合作" class="headerlink" title="共同合作"></a>共同合作</h2><p>在團隊分工若遇到不能push的時候，可能你團隊的某個人已經先commit過後push上去了，此時可以先pull到自己的檔案後再push上去就可以解決，但如果每次都要先拉再推，會不會顯得有點麻煩?</p><h2 id="PR-Pull-Request"><a href="#PR-Pull-Request" class="headerlink" title="PR = Pull Request"></a>PR = Pull Request</h2><p>如果想幫忙做別人的專案時，=&gt;fork先複製一份到自己的帳號，改好了之後，再發送pull請求給原作者，這個簡易的過程就是大家耳熟能詳的”發PR”。</p><blockquote><p>“If I fail, I try again, and again, and again. If you fail, are you going to try again? The human spirit can handle much worse than we realize. It matters how you are going to finish.”</p><p>— Nick Vujicic, Motivational Speaker</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都在寫Rails相關的內容，其實版本控制也是重要的一環，就來換個口味寫個GitHub吧～&lt;/p&gt;
&lt;p&gt;登入GitHub後第一步&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ftmo3TA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day27: Rails關心你的胖Model - concern</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2027/"/>
    <id>https://louiswuyj.site/鐵人賽Day 27/</id>
    <published>2019-10-10T04:10:40.000Z</published>
    <updated>2020-09-19T13:05:30.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/2zmCaE9.png" alt=""></p><p>在controller寫方法時，若常常需要用到某個方法，我們會將方法直接寫在Model或上層的<code>application_controller.rb</code>來取用。</p><a id="more"></a><p>已正在進行的專案為例，每個User有一台購物車，除了devise給我們現有的<code>current_user</code>之外，我想在寫個<code>current_cart</code>給每個controller用，此時就可以把定義<code>current_cart</code>的方法寫在<code>application_controller.rb</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current_cart</span></span></span><br><span class="line">    @current_cart <span class="params">||</span>= Cart.find_or_create_by(<span class="symbol">user:</span> current_user)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但有時候並不是每個controller或Model都需要用到這個方法，尤其是把所有要用的方法寫在該類別的Model，會導致Model越來越肥，controller越來越瘦。</p><h2 id="有需要的時候再拿進來"><a href="#有需要的時候再拿進來" class="headerlink" title="有需要的時候再拿進來"></a>有需要的時候再拿進來</h2><p>為了解決這個問題，rails在models下有個資料夾名稱<code>concerns</code>，把定義方法寫在這，在該controller有需要的時候再引入使用就好。</p><p>新增一個檔案 usercart.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Usercart</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    has_one <span class="symbol">:cart</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(search)</span></span></span><br><span class="line">      <span class="keyword">if</span> search</span><br><span class="line">        where([<span class="string">'title || description || address LIKE ?'</span>, <span class="string">"%<span class="subst">#&#123;search&#125;</span>%"</span>])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        all</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current_cart</span></span></span><br><span class="line">    @current_cart <span class="params">||</span>= Cart.find_or_create_by(<span class="symbol">user:</span> current_user)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>included do ...end</code> 當這個module被include到Model時會做的事：(一對一)有一台購物車<br><code>ClassMethod</code> 在這裡定義的方法被include時會變成類別方法：可以直接針對該Model做搜尋的方法。<br><code>current_cart</code> 被include之後會變成該類別的實體方法：如果有找到車就用這台，沒有車就生一台給user。</p><p>此時在User的Model加入：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">    <span class="keyword">include</span> Usercart</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>就可以擁有在concern資料夾下內 usercart.rb 裡的方法可以用了，相對的如果你在其他的Model也想要用的話，再直接include進該Model就好。</p><p>參考資料：<br><a href="https://stackoverflow.com/questions/14541823/how-to-use-concerns-in-rails-4" target="_blank" rel="noopener">How to use concerns in Rails 4</a><br><a href="https://railsbook.tw/chapters/25-organize-your-code.html" target="_blank" rel="noopener">Rails 程式碼整理術（入門）</a></p><blockquote><p>“Live today. Not yesterday. Not tomorrow. Inhabit your moments. Don’t rent them out to tomorrow.”</p><p>– Jerry Spinelli, Writer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2zmCaE9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在controller寫方法時，若常常需要用到某個方法，我們會將方法直接寫在Model或上層的&lt;code&gt;application_controller.rb&lt;/code&gt;來取用。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day26: Rails中的view_helper</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2026/"/>
    <id>https://louiswuyj.site/鐵人賽Day 26/</id>
    <published>2019-10-09T04:10:40.000Z</published>
    <updated>2020-09-19T11:40:25.657Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xvFLI1W.png" alt=""></p><p>在寫view時，常常會因為過多的邏輯判斷，導致整個view的程式碼非常冗長且難以維護，其實view只是將處理好的資料呈現出來而已，不應該把複雜的邏輯寫在view裡面，此時我們就可以用到helper來解決。</p><a id="more"></a><h2 id="View拿不到controller裡的方法"><a href="#View拿不到controller裡的方法" class="headerlink" title="View拿不到controller裡的方法"></a>View拿不到controller裡的方法</h2><p>一般在rails裡，view拿不到controller裡的方法，只能拿到對應的action的實體變數，這時候我們就需要用到helper來將方法寫給view使用。</p><p>helper的目的是要寫一段ruby code 協助整理資訊，並且可以做兩件事：</p><ol><li>在view頁面使用時就可直接使用</li><li>也可 include 至 controller使用</li></ol><blockquote><p>簡單來說，只要寫在helper裡的方法，view與comtroller都可以取用。</p></blockquote><p>最近寫專案有寫到購物車，每一個使用者擁有一台車，如果在每次想要撈使用者購物車的資料都要 <code>current_user.cart</code> 的方法去找感覺很麻煩，何不就自己寫個 <code>current_cart</code> 呢？</p><p>解決方式有兩個：</p><ol><li>直接寫在helper</li><li>方法寫在controller輸出給helper</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#_navbar.html.erb</span><br><span class="line">#加入</span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> "購物車(#&#123;<span class="attr">current_cart.items.count</span>&#125;)", "#" %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1ONJ9F8.png" alt=""></p><p>噴出找不到方法 <code>current_cart</code>，因為還沒寫嘛！</p><h2 id="直接寫在helper"><a href="#直接寫在helper" class="headerlink" title="直接寫在helper"></a>直接寫在helper</h2><h3 id="讓view取得helper方法"><a href="#讓view取得helper方法" class="headerlink" title="讓view取得helper方法"></a>讓view取得helper方法</h3><p>在寫helper之前，要先注意命名的對應，檔名如果是products_helper.rb，則檔案內的 module 後就得寫 ProductsHelper，跟 controller 的命名對應規則是一樣的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app/helpers/products_helper.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ProductsHelper</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current_cart</span></span></span><br><span class="line">    @cart = @cart <span class="params">||</span> Cart.from_hash(session[<span class="symbol">:cart123</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果有車就用這台車，如果沒車就給他一台名叫 <code>cart123</code>的車並存在session，此時的 <code>product.html.erb</code> 就可以使用 <code>current_cart</code> 了。</p><p>如果也想讓controller用</p><h3 id="讓controller取得helper方法"><a href="#讓controller取得helper方法" class="headerlink" title="讓controller取得helper方法"></a>讓controller取得helper方法</h3><p>畢竟剛剛寫的helper是個模組，直接 include 進來就好了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#products_controller.rb</span></span><br><span class="line"><span class="keyword">include</span> ProductsHelper</span><br></pre></td></tr></table></figure><h2 id="方法寫在controller輸出給helper"><a href="#方法寫在controller輸出給helper" class="headerlink" title="方法寫在controller輸出給helper"></a>方法寫在controller輸出給helper</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#products_controller.rb</span></span><br><span class="line">helper_method <span class="symbol">:current_cart</span></span><br><span class="line"><span class="comment">#方法寫在這</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current_cart</span></span></span><br><span class="line">    @cart = @cart <span class="params">||</span> Cart.from_hash(session[<span class="symbol">:cart123</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在controller加入 <code>helper_method :current_cart</code> 就可以使helper擁有這個方法，當然view也可以一起使用了。</p><p>但如果將方法寫在controller，只有在特定 controller 可以用，如果要全部的controller都可用的話，可貼在最上層的controller：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application_controller.rb</span></span><br><span class="line">helper_method <span class="symbol">:current_cart</span></span><br><span class="line"><span class="comment">#方法寫在這</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">current_cart</span></span></span><br><span class="line">    @cart = @cart <span class="params">||</span> Cart.from_hash(session[<span class="symbol">:cart123</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="那我該用哪個方式？"><a href="#那我該用哪個方式？" class="headerlink" title="那我該用哪個方式？"></a>那我該用哪個方式？</h2><p>這兩種方式都是在讓views拿到controller裡面的方法，至於要選擇哪種方法的判斷標準：<br><strong>Contorller 用得多就寫在 Contorller，view 用得多就寫在 view</strong>。</p><p>參考資料：<br><a href="https://railsbook.tw/chapters/15-layout-render-and-view-helper.html" target="_blank" rel="noopener">Layout, Render 與 View Helper</a></p><blockquote><p>“When you find your path, you must not be afraid. You need to have sufficient courage to make mistakes.”</p><p>– Paulo Coelho, Novelist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xvFLI1W.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在寫view時，常常會因為過多的邏輯判斷，導致整個view的程式碼非常冗長且難以維護，其實view只是將處理好的資料呈現出來而已，不應該把複雜的邏輯寫在view裡面，此時我們就可以用到helper來解決。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day25: Rails中的一球冰淇淋 scope</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2025/"/>
    <id>https://louiswuyj.site/鐵人賽Day 25/</id>
    <published>2019-10-08T04:10:40.000Z</published>
    <updated>2019-10-24T11:38:59.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/wjqS1Dq.png" alt=""></p><p>這個標題、這個圖片，難道是要講什麼吃冰淇淋的感言分享嗎？</p><a id="more"></a><p>但這真的是我第一次接觸這個名詞腦袋中第一個浮現的畫面XD<br>可能字真的太像了吧(還是只有我這樣覺得？)</p><p><img src="https://i.imgur.com/xctRRHl.png" alt=""></p><p>看來對我來說，不止中文字有這個問題，好像連英文單字都是…</p><p>scope, scoop傻傻分不清楚(誤)</p><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><p>最近做專案常常發現，在撈資料的時候，常常一直點find點where一直點下去，但有發現有時候在同一個controller時，都在對特定Model做同一件事情，在Rails常常可以看到一個字<strong>DRY</strong>:</p><blockquote><p>Don’t Repeat Yourself</p></blockquote><p>為了能夠讓程式碼變得乾淨易讀且方便使用，我們就可以在該controller的Model寫<code>scope</code>。</p><p>也許你會說，可一個一個寫也沒什麼不好啊？</p><p>但如果今天需求變更(例如：原本出全部的資料改為撈價格小於100的資料)，那不就全站都需要跟著修改？非常不方便，所以這時候我們就需要用到<code>scope</code>。</p><p>先來看個簡單的例子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foods_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @foods = Food.order(<span class="symbol">create_at:</span> <span class="symbol">:desc</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>撈出所有Food Model的物件並依照建立時間排序，這時候如果要寫成scope來使用，就可以在Model寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line">  scope <span class="symbol">:show_all</span>, -&gt; &#123; order(<span class="symbol">create_at:</span> <span class="symbol">:desc</span>) &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候的controller就可以這要取用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foods_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @foods = Food.show_all</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果後面的其他action也要做一樣的事情，就只要在Model名稱(此例為Food)後面加你寫 scope 的方法名稱就可以了。</p><h3 id="小補充："><a href="#小補充：" class="headerlink" title="小補充："></a>小補充：</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="comment">#寫法一</span></span><br><span class="line">  scope <span class="symbol">:show_all</span>, -&gt; &#123; order(<span class="symbol">create_at:</span> <span class="symbol">:desc</span>) &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#寫法二</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">show_all</span></span></span><br><span class="line">    order(<span class="symbol">create_at:</span> <span class="symbol">:desc</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>寫法一與寫法二的效果是相同的，至於何時該用哪個，其實就是看個人偏好了，我自己的感覺，如果是條件簡單的話就用scope寫，如果是條件較複雜的話就用類別方法寫。</p><h2 id="如果想帶參數"><a href="#如果想帶參數" class="headerlink" title="如果想帶參數"></a>如果想帶參數</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line">  scope <span class="symbol">:cheap_price</span>, -&gt;(price) &#123; where(<span class="string">"price &lt; ?"</span>, price)&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這時候controller就可以拿來用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foods_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @foods = Food.cheap_price(price)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="scope本身可以帶入scope-串接"><a href="#scope本身可以帶入scope-串接" class="headerlink" title="scope本身可以帶入scope(串接)"></a>scope本身可以帶入scope(串接)</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#food.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> &lt; ApplicationRecord</span></span><br><span class="line">  scope <span class="symbol">:show_all</span>, -&gt; &#123; order(<span class="symbol">create_at:</span> <span class="symbol">:desc</span>).cheap_price(<span class="number">100</span>) &#125;</span><br><span class="line">  scope <span class="symbol">:cheap_price</span>, -&gt;(price) &#123; where(<span class="string">"price &lt; ?"</span>, price)&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foods_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @foods = Food.show_price(price)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這樣的寫法就可以撈出價格小於 price 且按照建立時間排序了。</p><p>參考資料：<br><a href="https://rails.ruby.tw/active_record_querying.html#%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener">Rails Guide</a><br><a href="https://mgleon08.github.io/blog/2015/12/20/ruby-on-rails-scopes/" target="_blank" rel="noopener">Ruby on Rails - Scopes</a><br><a href="https://railsbook.tw/chapters/16-model-basic.html#scope-and-class-method" target="_blank" rel="noopener">為你自己學Ruby on Rails</a></p><blockquote><p>“Every challenge, every adversity, contains within it the seeds of opportunity and growth.”</p><p>– Roy Bennett, Politician</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wjqS1Dq.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這個標題、這個圖片，難道是要講什麼吃冰淇淋的感言分享嗎？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day24: Rails中的find? find_by? where?</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2024/"/>
    <id>https://louiswuyj.site/鐵人賽Day 24/</id>
    <published>2019-10-07T04:10:40.000Z</published>
    <updated>2019-10-24T11:39:08.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/ZInCbYJ.png" alt=""></p><p>在rails中有多種方法可以去查詢我們要的record，今天就來分別探討最常見的三種方法。</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>找出單一筆資料，且只能透過id去搜尋。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出id為1的購物車</span></span><br><span class="line">Cart.find(1)</span><br></pre></td></tr></table></figure><p>對應的SQL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cart Load (0.4ms)  SELECT  <span class="string">"carts"</span>.* FROM <span class="string">"carts"</span> WHERE <span class="string">"carts"</span>.<span class="string">"id"</span> = <span class="variable">$1</span> LIMIT <span class="variable">$2</span>  [[<span class="string">"id"</span>, 1], [<span class="string">"LIMIT"</span>, 1]]</span><br></pre></td></tr></table></figure><p>如果查詢不到該筆資料，就會回傳一個<code>ActiveRecord::RecordNotFound</code>的例外訊息，還記得之前的文章有提過例外處理的方法嗎？</p><p>這時候就可以用<code>begin..rescue</code>來捕捉：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_cart</span></span></span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">     @cart = Cart.find(params[<span class="symbol">:id</span>])</span><br><span class="line">   <span class="keyword">rescue</span></span><br><span class="line">     redirect_to carts_path, <span class="symbol">notice:</span> <span class="string">"沒有這台購物車喔"</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果找不到cart的話，就會直接執行rescue下的程式碼。</p><p>若要找多筆資料又堅持用find，find()裡面還可以塞陣列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">products = Product.find([2, 5])      <span class="comment"># 等同於 Client.find(2, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找id是2跟id是5的product</span></span><br></pre></td></tr></table></figure><h2 id="find-by"><a href="#find-by" class="headerlink" title="find_by"></a>find_by</h2><p>找出單一筆資料，且可以透過自訂條件去搜尋。</p><p><img src="https://i.imgur.com/1KOYaOX.png" alt=""></p><p>找出id為5的食物:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Food.find_by(id: 5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等同於Food.find(5)</span></span><br></pre></td></tr></table></figure><p>對應的SQL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Food Load (0.4ms)  SELECT  <span class="string">"foods"</span>.* FROM <span class="string">"foods"</span> WHERE <span class="string">"foods"</span>.<span class="string">"id"</span> = <span class="variable">$1</span> LIMIT <span class="variable">$2</span>  [[<span class="string">"id"</span>, 5], [<span class="string">"LIMIT"</span>, 1]]</span><br></pre></td></tr></table></figure><p>找id是2的使用者擁有的食物：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Food.find_by(user_id: 2)</span><br></pre></td></tr></table></figure><p>對應的SQL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Food Load (0.2ms)  SELECT  <span class="string">"foods"</span>.* FROM <span class="string">"foods"</span> WHERE <span class="string">"foods"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span> LIMIT <span class="variable">$2</span>  [[<span class="string">"user_id"</span>, 2], [<span class="string">"LIMIT"</span>, 1]]</span><br></pre></td></tr></table></figure><p>這裡可以注意的是，如果找不到該筆資料的話，<code>find_by</code>方法會回傳的值是<code>nil</code>而不是例外訊息。</p><p><img src="https://i.imgur.com/190Aeer.png" alt=""></p><p>若使用find_by方法撈資料但還是想要有回傳<code>ActiveRecord::RecordNotFound</code>，可以在find_by後面加個驚嘆號<code>!</code></p><p><img src="https://i.imgur.com/jDBnzwK.png" alt=""></p><p>就可以看到回傳的值不是<code>nil</code>而是可以捕捉的例外訊息了。</p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>找出多筆資料，且可以透過自訂條件去搜尋，即代表了 SQL 語法 WHERE 的部分。</p><p>條件可以是<strong>字串</strong>、<strong>陣列</strong>、或是 <strong>Hash</strong>。</p><h3 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h3><p>如果我們要找的 orders_count 不是固定的值，則帶入變數<code>params[:orders]</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client.where(<span class="string">"orders_count = ?"</span>, params[:orders])</span><br></pre></td></tr></table></figure><p>根據Rails API文件：</p><blockquote><p>直接將變數插入條件字串裡，不論變數是什麼，都會直接存到資料庫裡。這表示從惡意使用者傳來的變數，會直接存到資料庫。這麼做是把資料庫放在風險裡不管啊！一旦有人知道，可以隨意將任何字串插入資料庫裡，就可以做任何想做的事。</p></blockquote><h3 id="絕對不要直接將變數插入條件字串裡。"><a href="#絕對不要直接將變數插入條件字串裡。" class="headerlink" title="絕對不要直接將變數插入條件字串裡。"></a>絕對不要直接將變數插入條件字串裡。</h3><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>找id是2的使用者全部擁有的食物：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Food.where(user_id: 10)</span><br></pre></td></tr></table></figure><p>對應的SQL:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Food Load (0.4ms)  SELECT <span class="string">"foods"</span>.* FROM <span class="string">"foods"</span> WHERE <span class="string">"foods"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 10]]</span><br></pre></td></tr></table></figure><p>若找不到該筆資料，則會回傳<code>#&lt;ActiveRecord::Relation []&gt;</code>。</p><p>參考資料：<br><a href="http://justineyeah-blog.logdown.com/posts/1814190-jd-store-find-find-by-where-in-rails" target="_blank" rel="noopener">JD store find/find_by/where in Rails</a><br><a href="https://rails.ruby.tw/active_record_querying.html" target="_blank" rel="noopener">Active Record 查詢</a><br><a href="https://pjchender.github.io/2018/02/25/rails-active-record-query%EF%BC%88model-%E8%B3%87%E6%96%99%E6%9F%A5%E8%A9%A2%EF%BC%89/" target="_blank" rel="noopener">[Rails] Active Record Query（SQL Query）</a><br><a href="https://railsbook.tw/chapters/16-model-basic.html" target="_blank" rel="noopener">Model 基本操作</a></p><blockquote><p>“Most of our obstacles would melt away if instead of cowering before them we should make up our minds to walk boldly through them.”</p><p>— Orison Marden, Writer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZInCbYJ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在rails中有多種方法可以去查詢我們要的record，今天就來分別探討最常見的三種方法。&lt;/p&gt;
&lt;h2 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink&quot; title=&quot;find&quot;&gt;&lt;/a&gt;find&lt;/h2&gt;&lt;p&gt;找出單一筆資料，且只能透過id去搜尋。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day23: Rails中的N+1問題</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2023/"/>
    <id>https://louiswuyj.site/鐵人賽Day 23/</id>
    <published>2019-10-06T04:10:40.000Z</published>
    <updated>2020-09-19T11:41:11.078Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/x2SP56l.png" alt=""></p><p>Rails要建立關聯非常簡單(one-to-one, one-to-many)，但也是這個原因，造成在資料庫查詢的時候浪費許多記憶體，大部分的 ORM 預設使用 lazy-loading，一筆資料的查詢就會產生一筆 query，拖累了資料庫的效能。<a id="more"></a>因此將預設的 lazy-loading 改成 Eager-loading 就可以解決N+1問題。</p><p>其中 Eager-loading在 rails 提供了4種方式：</p><ul><li>preload</li><li>eagerload</li><li>includes</li><li>joins</li></ul><p>這篇就拿最常見的inclundes及joins來討論。</p><p>我們先建立兩個Model分別為<code>user.rb</code>及<code>product.rb</code>且為一對多關係：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:products</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#product.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>controller先將所有的Pdoduct撈出：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#products_controller.rb</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @products = Product.all</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>再一筆一筆印出來：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.erb.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> @<span class="attr">products.each</span> <span class="attr">do</span> |<span class="attr">product</span>| %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">product.user.name</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">product.title</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">product.price</span>%&gt;</span></span><br><span class="line">    ....</span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>乍看之下好像很合理，如果說只有一筆product要查這樣寫沒問題，但一個網站怎麼可能只有一筆資料？</p><p>若今天要找出product的擁有者、名字及價錢有10筆。在迭代每筆資料時，一邊呼叫 query 來從 Prdoduct 資料表中取資料，就會產生 10 + 1 次 query，其中後面的 1 指的是 User資料數量。</p><p>資料的存取是rails的弱項，所以在設計時能夠避免 N+1問題就避免，將資料存取相關的事交給擅長的資料庫就好。</p><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>拿上面例子來看，會產生 10+1筆的資料存取，我們可以用includes的方式將所有資料在資料第一次存取時就“一次查完“因此在controller的部份我們可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#products_controller.rb</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @products = Product.includes(<span class="symbol">:user</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>再 query 的部分就只會查詢2筆了。</p><h2 id="joins與includes的差別"><a href="#joins與includes的差別" class="headerlink" title="joins與includes的差別"></a>joins與includes的差別</h2><p>:joins 使用 SQL 的 INNER JOIN 方法，不會真的把關聯的資料取出來。如果只是想要篩選結果，或是觀察關聯物件的某些屬性質，那麼使用 :joins 是最有效率的。不過有一點要注意，如果你想要做的事是存取關聯物件本身，那麼 :joins 還是會造成 N+1 問題。</p><p>主要差別在於：</p><ol><li>join主要用於過濾model之間的關係，但對查詢筆數來說並無太大幫助</li><li>include主要用於將大量資料在同一筆查詢內一次查好</li></ol><p>參考資料：</p><p>部分內容擷取自以下連結<br><a href="https://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html" target="_blank" rel="noopener">Preload, Eagerload, Includes and Joins</a><br><a href="https://ithelp.ithome.com.tw/articles/10161667" target="_blank" rel="noopener">Rails使用include和join避免 N+1 queries</a><br><a href="https://medium.com/@jinghua.shih/rails-activerecord-%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96-%E4%B8%8A-%E9%97%9C%E8%81%AF%E6%9F%A5%E8%A9%A2-75ca79f510b3" target="_blank" rel="noopener">[Rails] N+1 Queries Problem</a><br><a href="https://rails.ruby.tw/active_record_querying.html" target="_blank" rel="noopener">Rails API</a></p><blockquote><p>“Tests are a gift. And great tests are a great gift. To fail the test is a misfortune. But to refuse the test is to refuse the gift, and something worse, more &gt;irrevocable, than misfortune.”</p><p>– Lois McMaster Bujold, writer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/x2SP56l.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Rails要建立關聯非常簡單(one-to-one, one-to-many)，但也是這個原因，造成在資料庫查詢的時候浪費許多記憶體，大部分的 ORM 預設使用 lazy-loading，一筆資料的查詢就會產生一筆 query，拖累了資料庫的效能。
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day22: 簡易Rails實作(下)</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2022/"/>
    <id>https://louiswuyj.site/鐵人賽Day 22/</id>
    <published>2019-10-05T04:10:40.000Z</published>
    <updated>2019-10-24T11:39:24.024Z</updated>
    
    <content type="html"><![CDATA[<p>上次講到了Strong Parameters，今天我們就從Flash開始吧！</p><h2 id="快閃訊息flash"><a href="#快閃訊息flash" class="headerlink" title="快閃訊息flash"></a>快閃訊息flash</h2><p><img src="https://i.imgur.com/tjW0Pjy.png" alt=""></p><a id="more"></a><p>在按下按鈕後，應該要有個訊息出現告知使用者是否有成功或失敗，並且只出現一次，這就是快閃訊息做的事。<br>在這個專案，我們希望如果 create 成功，會將網頁導向 首頁 並印出 “新增候選人成功!!”，反之若失敗，則印出”新增候選人失敗!!” (一樣false還沒寫入)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#上略 </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    clean_params = params.<span class="keyword">require</span>(<span class="symbol">:candidate</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span>)</span><br><span class="line">    @candidate = Candidate.new(clean_params)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> @candidate.save</span><br><span class="line">      flash[<span class="symbol">:notice</span>] = <span class="string">"新增候選人成功!!"</span>         <span class="comment">#第7~8行可直接寫成 redirect_to root_path, notice: "新增候選人成功!!"</span></span><br><span class="line">      redirect_to root_path</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      flash[<span class="symbol">:notice</span>] = <span class="string">"新增候選人失敗!!"</span>         <span class="comment">#第10~11行可直接寫成 redirect_to root_path, notice: "新增候選人失敗!!"</span></span><br><span class="line">      redirect_to root_path</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#並在index.html.erb檔加入</span></span><br><span class="line"></span><br><span class="line">&lt;%= flash[<span class="symbol">:notice</span>] %&gt;   印出<span class="string">"新增候選人成功!"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/59ON3bS.png" alt=""></p><h2 id="首頁印出候選人列表"><a href="#首頁印出候選人列表" class="headerlink" title="首頁印出候選人列表"></a>首頁印出候選人列表</h2><p>想要在首頁做事情，那當然是去 <code>index</code> 做事，首先針對 candidate_controller.rb 裡的 index method寫入:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@candidates = Candidate.all</span><br><span class="line"></span><br><span class="line">注意<span class="symbol">:</span>這裡的實體變數故意列為<span class="string">"複數"</span>，因為是撈出全部候選人的資料</span><br></pre></td></tr></table></figure><p>去抓所有使用者輸入的資料。<br>再來到 <code>index.html.erb</code> 利用each迴圈印出所有候選人的”姓名”。</p><p><img src="https://i.imgur.com/dzMqxuK.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">flash</span>[<span class="attr">:notice</span>] %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首頁:候選人列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># <span class="tag">&lt;<span class="name">%%</span>&gt;</span>不顯示在頁面</span><br><span class="line">#<span class="tag">&lt;<span class="name">=%%</span>&gt;</span>要顯示在頁面上</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> @<span class="attr">candidates.each</span> <span class="attr">do</span> |<span class="attr">candidate</span>| %&gt;</span>     #注意是@candidate"s"</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">candidate.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '新增候選人', <span class="attr">new_candidate_path</span>, <span class="attr">class:</span> '<span class="attr">btn</span> <span class="attr">btn-danger</span> <span class="attr">btn-lg</span>' %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="驗證資料"><a href="#驗證資料" class="headerlink" title="驗證資料"></a>驗證資料</h2><p>人打字總偶爾有肥手指、眼睛業障或看錯欄位的狀況發生，所以每個輸入的資料都需要做進一步的認證才能進入資料庫。</p><p>(總不可能候選人只有3歲吧!!!?)</p><p>還記得剛剛寫的 <code>if else</code> 判斷總是忽略 <code>false</code> 的話怎麼辦對吧? 如果不寫入以下程式碼的話，永遠不會進入到 <code>else</code> 的判斷，到 candidate.rb 裡新增:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Candidate</span> &lt; ApplicationRecord</span></span><br><span class="line">  validates <span class="symbol">:name</span>, <span class="symbol">presence:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="comment">#腦補眼鏡</span></span><br><span class="line">  <span class="comment">#validates (:name, &#123;presence: true&#125;)  </span></span><br><span class="line">  </span><br><span class="line">  validates <span class="symbol">:age</span>, <span class="symbol">numericality:</span> &#123; <span class="symbol">greater_than_or_equal_to:</span> <span class="number">40</span> &#125;</span><br><span class="line">  <span class="comment">#腦補眼鏡</span></span><br><span class="line">  <span class="comment">#validates (:age, &#123;numericality: &#123; &#123;greater_than_or_equal_to: 40&#125; &#125;&#125;)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>姓名欄位: 有資料才會會回傳true ; 年紀欄位: 必須大於或等於40歲<br>其實我們再 <code>create</code> 中的 <code>if else</code> 判斷式寫的較不人性化，若今天使用者打錯某字跳出”新增候選人失敗!!”，回到新增頁面後竟然還要重新打字，是不是太麻煩了? 所以我們要修正<code>else</code>後的輸出方式:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandidatesController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @candidate = Candidate.all</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @candidate = Candidate.new</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    clean_params = params.<span class="keyword">require</span>(<span class="symbol">:candidate</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span>)</span><br><span class="line">    @candidate = Candidate.new(clean_params)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> @candidate.save</span><br><span class="line">      flash[<span class="symbol">:notice</span>] = <span class="string">"新增候選人成功!"</span></span><br><span class="line">      redirect_to root_path</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">#原來寫法:flash[:notice] = "新增候選人失敗!"</span></span><br><span class="line">      <span class="comment">#原來寫法:redirect_to root_path</span></span><br><span class="line">      render <span class="symbol">:new</span>  <span class="comment"># 借new.html.erb這個檔案，並不是上方的new方法!!!</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>就解決了如果打錯字回到頁面後文字被洗掉的問題。</p><h2 id="哪裡輸入錯誤"><a href="#哪裡輸入錯誤" class="headerlink" title="哪裡輸入錯誤?"></a>哪裡輸入錯誤?</h2><p>若輸入錯誤的話，總要告訴使用者是哪裡輸入錯誤吧?<br>new.html.erb內新增判斷式，就會印出Rails內建的<code>full_messages</code>資料庫訊息:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增候選人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> @<span class="attr">candidate.errors.any</span>? %&gt;</span>   #.errors.any? =&gt;有錯誤嗎?</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> @<span class="attr">candidate.errors.full_messages.each</span> <span class="attr">do</span> |<span class="attr">message</span>| %&gt;</span> # .full_messages =&gt; Rails內建的錯誤訊息資料庫</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">message</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span>(@<span class="attr">candidate</span>) <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">#下略....</span><br></pre></td></tr></table></figure><h2 id="查看候選人詳細資料"><a href="#查看候選人詳細資料" class="headerlink" title="查看候選人詳細資料"></a>查看候選人詳細資料</h2><p>當然在看候選人的時候不可能只看名字吧?所以我們要做一個只要點選候選人姓名，就轉至候選人資料的頁面。<br>index.html.erb頁面:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#index.html.erb</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">flash</span>[<span class="attr">:notice</span>] %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首頁:候選人列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;% @candidate.each do |candidate| %&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;%= candidate.name %&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;% end %&gt;</span></span><br><span class="line"><span class="comment">&lt;/ul&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> @<span class="attr">candidate.each</span> <span class="attr">do</span> |<span class="attr">candidate</span>| %&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--路徑需查 rails routes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> <span class="attr">candidate.name</span>, <span class="attr">candidate_path</span>(<span class="attr">candidate.id</span>) %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '新增候選人', <span class="attr">new_candidate_path</span>, <span class="attr">class:</span> '<span class="attr">btn</span> <span class="attr">btn-danger</span> <span class="attr">btn-lg</span>' %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RzaZytg.png" alt=""></p><p>就會是可以點選的狀態了，能夠預期若按下候選人姓名會發生什麼事嗎?</p><p><img src="https://i.imgur.com/ca6Ldn5.png" alt=""></p><p>因為我們還沒有建立在 show 方法:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">    @candidate = Candidate.find_by(<span class="symbol">id:</span> params[<span class="symbol">:id</span>])  </span><br><span class="line">    <span class="comment">#Candidate.find_by =&gt; Rails內建尋找相對應資料的方法</span></span><br><span class="line">    <span class="comment">#腦補眼鏡(&#123;id: params[:id]&#125;)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>({id: params[:id]}) :取<code>params</code>內key是<code>:id</code>的value當作外面<code>id:</code>的value<br>聽起來很像繞口令，讓我們一步一步拆開來看。</p><p>params本身是Hash的資料型態，也就是上面有敘述過的一大串資料:</p><blockquote><p>{“utf8”=&gt;”✓”, “authenticity_token”=&gt;”0OHbZ7WkDs8NsrNHK2s7Dd9BxkITn/qegeFtUcMmE5ANKKiaxmRCOiPuChEAoKh4ho/taDYBB7GvIhTG0a1IHw==”, “candidate”=&gt;{“name”=&gt;”Louis”, “party”=&gt;”none”, “age”=&gt;”20”, “policy”=&gt;”Rails is Good”}, “commit”=&gt;”Create Candidate”, “controller”=&gt;”candidates”, “action”=&gt;”create”}</p></blockquote><p>上面有講過個例子，若我要拿到Louis，我需要寫<code>params[&#39;candidate&#39;][&#39;name&#39;]</code> 才能拿到對吧?</p><blockquote><p>params[‘candidate’][‘name’]<br>            ↓　　　　　↓<br>      ({   id:     　params[:id]}) </p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假設 params = &#123; <span class="symbol">id:</span> <span class="number">5</span>, <span class="symbol">email:</span> <span class="string">'kk@5xruby.tw'</span>, <span class="symbol">name:</span> <span class="string">'Louis'</span> &#125;</span><br><span class="line">find_by(<span class="symbol">id:</span> params[<span class="symbol">:id</span>], <span class="symbol">email:</span> params[<span class="symbol">:email</span>], <span class="symbol">name:</span> params[<span class="symbol">:name</span>])</span><br><span class="line">find_by(        <span class="number">5</span>      ,      kk@5xruby.tw    ,     Louis          )</span><br><span class="line"></span><br><span class="line">這樣可以找到在候選人表格裡「id 是 <span class="number">5</span>，而且 email 是 kk@5xruby.tw，而且 name 是 Louis」的候選人</span><br></pre></td></tr></table></figure><p>這樣對應著看，應該有比較容易理解吧!!</p><p>但還是會出現錯誤(笑</p><p><img src="https://i.imgur.com/JVlrNje.png" alt=""></p><p>記得也要在views建立 show.html.erb</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> @<span class="attr">candidate</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> @<span class="attr">candidate.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>黨派: <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">candidate.party</span>%&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年紀: <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">candidate.age</span>%&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>政見: <span class="tag">&lt;<span class="name">%=</span> @<span class="attr">candidate.policy</span>%&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">else</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>沒有這個人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Tlc2w1n.png" alt=""></p><p>就終於完成了簡易CRUD中的C跟R…</p><h5 id="腦細胞少10-，皺褶增加0-001"><a href="#腦細胞少10-，皺褶增加0-001" class="headerlink" title="腦細胞少10%，皺褶增加0.001%"></a>腦細胞少10%，皺褶增加0.001%</h5><p>參考資料：</p><p><a href="https://railsbook.tw/chapters/13-crud-part-1.html" target="_blank" rel="noopener">為你自己學Ruby on Rails</a></p><blockquote><p>“The difference in winning and losing is most often…not quitting.”</p><p>— Walt Disney, Producer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次講到了Strong Parameters，今天我們就從Flash開始吧！&lt;/p&gt;
&lt;h2 id=&quot;快閃訊息flash&quot;&gt;&lt;a href=&quot;#快閃訊息flash&quot; class=&quot;headerlink&quot; title=&quot;快閃訊息flash&quot;&gt;&lt;/a&gt;快閃訊息flash&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tjW0Pjy.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day21: 簡易Rails實作(中)</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2021/"/>
    <id>https://louiswuyj.site/鐵人賽Day 21/</id>
    <published>2019-10-04T04:10:40.000Z</published>
    <updated>2019-10-24T11:39:31.410Z</updated>
    
    <content type="html"><![CDATA[<p>上次透過簡單首頁、分頁製作了第一個rails專案，了解到其中MVC的運作原理及routes與controller之間的關聯性，這次我們將延續上次的內容添加一些功能，並透過CRUD 中（Create、 Read、 Update、 Delete）C跟R的流程來建立專案，U和D的部分就暫時有機會的時候再說明了，現在就來做做看吧！</p><a id="more"></a><h2 id="新增候選人至表單"><a href="#新增候選人至表單" class="headerlink" title="新增候選人至表單"></a>新增候選人至表單</h2><p>在new.html.erb檔案中，我們需要一個表單讓使用者輸入，輸入後把資料丟到我們想要去的地方，先來建立表單吧!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增候選人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/candidates"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '回首頁', <span class="attr">candidates_path</span>, <span class="attr">class:</span> '<span class="attr">btn</span> <span class="attr">btn-primary</span> <span class="attr">btn-lg</span>'%&gt;</span></span><br></pre></td></tr></table></figure><p>其中我們可以看到第3行的action指的是我們要將資料丟去哪裡，method則是丟出去的方法。</p><p>(在終端機執行rails routes)</p><p><img src="https://i.imgur.com/MKCMMBr.png" alt=""></p><p>使用者填完表單並按送出後，會將資料丟去</p><p><code>candidates POST / candidates(.:format) candidates#create</code>:<br>對<code>candidates(.:format)</code> 這個地方丟資料去<code>candidates#create</code>的時候，需要用 <code>post</code> 方法。<br>此例我們要丟去的位置是<code>create</code>，且要用<code>post</code>的方式丟出，所以可以看到第3行 <code>action=&quot;/candidate&quot; method=&quot;post&quot;</code> 的部分才要用<code>post</code>而不是<code>get</code>。</p><p>此時的畫面長這樣:</p><p><img src="https://i.imgur.com/i42vAtb.png" alt=""></p><p>這時候如果我們隨便輸入東西並按下提交，會出現下圖:</p><p><img src="https://i.imgur.com/O13Fhec.png" alt=""></p><p>還記得上次的步驟嗎?<br>我們在controller根本還沒有給他方法，那它缺什麼，我們就給他什麼吧，回到 <code>candidates_controller.rb</code></p><p><img src="https://i.imgur.com/xIFti8G.png" alt=""></p><p>接下來應該大功告成了吧~至少應該可以按下提交後不會跳出錯誤了(灑花</p><h3 id="BUT"><a href="#BUT" class="headerlink" title="BUT!!!!"></a>BUT!!!!</h3><p>人生就是有無限的BUT….</p><h2 id="Rails-的預設防護"><a href="#Rails-的預設防護" class="headerlink" title="Rails 的預設防護"></a>Rails 的預設防護</h2><p><img src="https://i.imgur.com/zWZTyXs.png" alt=""></p><p>照上次的經驗來看，應該是只要新增方法就至少不會跳出錯誤了，但這裡為何會出錯呢?</p><p>原來是在rails裡面為了保護資料庫的安全，有個預設防護的機至給擋下來了。</p><blockquote><p>什麼是<a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/586268/" target="_blank" rel="noopener">Token?</a></p><p>生活情境:</p><p>小菜走在士林夜市，買了一杯位在”門口”的60嵐的珍奶並拿了20號號碼牌，想說要等，就先進去走走晃晃，看到前方剛好有一家位在”轉角”的60嵐!!!天真的小菜異想天開，想說反正都是60嵐直接拿號碼牌去領也可以吧!? 好懶得走回去喔…</p><p>跳到20號了!!!</p><p>店員: 呃(os:又來個知日 阝章)….你這個號碼牌不是我們店的喔，所以不能給你珍奶。</p><p>小菜難過的走在路上….<a href="https://www.google.com/search?rlz=1C1CHWL_zh-TWAU820AU820&biw=1280&bih=578&ei=JT1hXYrBGMLUsAfw0rnoAg&q=%E5%BE%9E%E5%89%8D%E6%9C%89%E4%B8%80%E5%80%8B%E4%BA%BA%E5%8F%AB%E5%B0%8F%E8%8F%9C%E4%BB%96%E8%B5%B0%E5%9C%A8%E8%B7%AF%E4%B8%8A+%E5%B0%B1%E8%A2%AB%E7%AB%AF%E8%B5%B0%E4%BA%86+&oq=%E5%BE%9E%E5%89%8D%E6%9C%89%E4%B8%80%E5%80%8B%E4%BA%BA%E5%8F%AB%E5%B0%8F%E8%8F%9C%E4%BB%96%E8%B5%B0%E5%9C%A8%E8%B7%AF%E4%B8%8A+%E5%B0%B1%E8%A2%AB%E7%AB%AF%E8%B5%B0%E4%BA%86+&gs_l=psy-ab.3...8402.8520..8793...0.0..0.316.316.3-1......0....1..gws-wiz.8xP0THHsmEY&ved=0ahUKEwjK54_6z5vkAhVCKuwKHXBpDi0Q4dUDCAo&uact=5" target="_blank" rel="noopener">就被端走了</a></p></blockquote><p>token有點像在做這件事，你手上的號碼牌顯示的店面，必須要跟領取的店面相同，才能夠拿到珍奶(我們要的結果)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增候選人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/candidates"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"&lt;%= form_authenticity_token %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '回首頁', <span class="attr">candidates_path</span>, <span class="attr">class:</span> '<span class="attr">btn</span> <span class="attr">btn-primary</span> <span class="attr">btn-lg</span>'%&gt;</span></span><br></pre></td></tr></table></figure><p>我們在 <code>new.html.erb</code> 檔案新增第5行，到開發者工具來檢視一下token:</p><p><img src="https://i.imgur.com/rewhljc.png" alt=""></p><p>紅色框線value的部分就是token的值，且每次重新整理都會更新一次。</p><p>這樣一來，按下提交後就不會噴錯誤訊息囉，可是不覺得每次要做個送出資料的欄位就要打這一串很麻煩嗎?</p><p>可以用上次介紹的 <code>form_for</code> 就可以省略複雜的那一行了，且rails會根據你在views的哪個檔案，自動幫你在button( <code>&lt;%= form.submit %&gt;</code>)中加入文字。(ex: Updated Candidate, Edit Candidate…)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span>(物件) <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line"></span><br><span class="line">   資料打在這裡</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><h1 id="在Model建立表單"><a href="#在Model建立表單" class="headerlink" title="在Model建立表單"></a>在Model建立表單</h1><p>Rails有個方式可以使 <code>form_for</code> 表單綁在Model上，在終端機輸入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rails generate model Candidate name:string party:string age:<span class="built_in">integer</span> policy:text</span><br><span class="line"></span><br><span class="line">or 簡單一點的寫法 (預設就是string)</span><br><span class="line"></span><br><span class="line">rails g model Candidate name party age:<span class="built_in">integer</span> policy:text</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QA21ghY.png" alt=""></p><p><img src="https://i.imgur.com/4QUmpeQ.png" alt=""></p><p><img src="https://i.imgur.com/woHTHG0.png" alt=""></p><p>新增了兩個檔案:</p><p>models下的<code>candidates.rb</code> 及 db&gt;migrate&gt;<code>*********_create_candidates.rb</code></p><p>其中在<code>*********_create_candidates.rb</code>會建立name(型態:string)、party(型態:string)、age(型態:integer)、policy(型態:text)，後面的timestamp(created_at, updated_at)其實是內建的，用來紀錄提交時的時間點。</p><p>(備註: Rails在資料庫建立資料表的時候，會帶一個預設的隱藏ID的欄位，且在上面不會顯示，如果不想要ID欄位的話可以再下指令去除。)</p><p>到了這個步驟，其實並不是真正的建立表單了，我們只是告訴它，我有這個要建立表單的”計畫”，所以還需要在終端機輸入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails db:migrate</span><br></pre></td></tr></table></figure><p>才是告知”請按照這個計畫執行”。</p><p>如果此時再 rails db:migrate一次，並不會發生任何事，因為已經建立好了就辦法再更改，如果要更改已建立的檔案只有兩種方式:</p><p>建立一個新的表單並”存檔”後，再rails db:migrate一次。<br>rails db:rollback， 但請盡量少用，除非非常確定，否則用了rollback後沒辦法再回復。</p><p>之後再開schema.rb就可以確認是否是你要的結果了。</p><p><img src="https://i.imgur.com/BN2jfxg.png" alt=""></p><h1 id="完成表單"><a href="#完成表單" class="headerlink" title="完成表單"></a>完成表單</h1><p>接著在 new.html.erb 透過 form_for將表單完成後如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增候選人<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span>(<span class="attr">Candidate.new</span>) <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"candidate_field"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.label</span> <span class="attr">:name</span>, '姓名' %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:name</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"candidate_field"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.label</span> <span class="attr">:party</span>, '黨派' %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:party</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"candidate_field"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.label</span> <span class="attr">:age</span>, '年紀' %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:age</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"candidate_field"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.label</span> <span class="attr">:policy</span>, '政策' %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_area</span> <span class="attr">:policy</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">link_to</span> '回首頁', <span class="attr">candidates_path</span>, <span class="attr">class:</span> '<span class="attr">btn</span> <span class="attr">btn-primary</span> <span class="attr">btn-lg</span>'%&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/cLLYl0L.png" alt=""></p><p>其中的 <code>Candidate.new</code> 是從Models裡的 <code>candidate.rb</code> 來的，但html.erb檔盡量用來做”印出內容”的事情就好，故我們不會希望在這裡用<code>Candidate.new</code> 來產生方法。</p><p><img src="https://i.imgur.com/VozvSvB.png" alt=""></p><p>在 <code>candidates_controller.rb</code> 裡的new method建立一個實體變數 <code>@candidate</code> ，接著寫入至 <code>new.html.erb</code> 裡面取代原來的<code>Candidate.new</code> 。</p><h2 id="新增候選人資料"><a href="#新增候選人資料" class="headerlink" title="新增候選人資料"></a>新增候選人資料</h2><p>此時按下create並不會產生任何事情，因為在controller裡的create method沒有寫任何東西，寫入下列程式至<code>create</code>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandidatesController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @candidate = Candidate.new</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    render <span class="symbol">html:</span> params</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>來看看 <code>html: params</code> 印出的內容</p><blockquote><p>{“utf8”=&gt;”✓”, “authenticity_token”=&gt;”0OHbZ7WkDs8NsrNHK2s7Dd9BxkITn/qegeFtUcMmE5ANKKiaxmRCOiPuChEAoKh4ho/taDYBB7GvIhTG0a1IHw==”, “candidate”=&gt;{“name”=&gt;”Louis”, “party”=&gt;”none”, “age”=&gt;”20”, “policy”=&gt;”Rails is Good”}, “commit”=&gt;”Create Candidate”, “controller”=&gt;”candidates”, “action”=&gt;”create”}</p></blockquote><p>剛剛輸入的資料就這樣全部已hash的方式印出來了，假設我們今天要取”name”裡面的value，我們可以這樣做:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render <span class="symbol">html:</span>params[<span class="string">"candidate"</span>] </span><br><span class="line">印出 &#123;<span class="string">"name"</span>=&gt;<span class="string">"Louis"</span>, <span class="string">"party"</span>=&gt;<span class="string">""</span>, <span class="string">"age"</span>=&gt;<span class="string">""</span>, <span class="string">"policy"</span>=&gt;<span class="string">""</span>&#125;</span><br><span class="line"></span><br><span class="line">render <span class="symbol">html:</span>params[<span class="string">"candidate"</span>][<span class="string">"name"</span>]</span><br><span class="line">印出 Louis</span><br></pre></td></tr></table></figure><h2 id="寫入資料庫"><a href="#寫入資料庫" class="headerlink" title="寫入資料庫"></a>寫入資料庫</h2><p><code>create</code> 的方法中可以用@candidate.save 來儲存使用者輸入的資料。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandidatesController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @candidate = Candidate.new</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    <span class="comment">#params["candidate"]印出的是&#123;"name"=&gt;"Louis", "party"=&gt;"", "age"=&gt;"", "policy"=&gt;""&#125;</span></span><br><span class="line">    @candidate = Candidate.new(params[<span class="string">"candidate"</span>])</span><br><span class="line">    <span class="keyword">if</span> @candidate.save</span><br><span class="line">      render <span class="symbol">html:</span> <span class="string">'ok'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment">#render html: 'error'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果儲存成功，印出ok，因為還沒寫入false的條件，故先暫時不管。</p><p>輸入資料按下create之後，就出現錯誤了…..</p><p><img src="https://i.imgur.com/WShpXd6.png" alt=""></p><h2 id="Rails的另一個預設防護-Strong-Parameters"><a href="#Rails的另一個預設防護-Strong-Parameters" class="headerlink" title="Rails的另一個預設防護: Strong Parameters"></a>Rails的另一個預設防護: Strong Parameters</h2><p>為了避免有心人士在填資料時，偷塞參數或惡搞資料庫，造成安全問題，所以在使用者輸入資料要進資料庫的同時，利用permit來過濾並設定那些資料是可以進資料庫哪些不行。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CandidatesController</span> &lt; ApplicationController</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new</span></span></span><br><span class="line">    @candidate = Candidate.new</span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    clean_params = params.<span class="keyword">require</span>(<span class="symbol">:candidate</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span>)</span><br><span class="line">    @candidate = Candidate.new(clean_params)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> @candidate.save</span><br><span class="line">      render <span class="symbol">html:</span> <span class="string">'ok'</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="symbol">html:</span> <span class="string">'error'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clean_params = params.<span class="keyword">require</span>(<span class="symbol">:candidate</span>).permit(<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span>)</span><br><span class="line"></span><br><span class="line">params.<span class="keyword">require</span>(<span class="symbol">:candidate</span>) =&gt; 就是找到<span class="string">"candidate"</span>=&gt;&#123;<span class="string">"name"</span>=&gt;<span class="string">"Louis"</span>, <span class="string">"party"</span>=&gt;<span class="string">"none"</span>, <span class="string">"age"</span>=&gt;<span class="string">"20"</span>, <span class="string">"policy"</span>=&gt;<span class="string">"Rails is Good"</span>&#125;, <span class="string">"commit"</span>=&gt;<span class="string">"Create Candidate"</span>, <span class="string">"controller"</span>=&gt;<span class="string">"candidates"</span>, <span class="string">"action"</span>=&gt;<span class="string">"create"</span>&#125;</span><br><span class="line"></span><br><span class="line">.permit(<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span>) =&gt; 允許<span class="symbol">:name</span>, <span class="symbol">:age</span>, <span class="symbol">:policy</span>, <span class="symbol">:party</span> 輸入的參數可以進入資料庫</span><br></pre></td></tr></table></figure><p>就可以正常執行了。(印出ok)</p><hr><p>礙於篇幅….好像只能先講到這，我們明天再繼續了。</p><p>參考資料：</p><p><a href="https://railsbook.tw/chapters/12-controllers.html" target="_blank" rel="noopener">為你自己學Ruby on Rails</a></p><blockquote><p>“Flaming enthusiasm, backed up by horse sense and persistence, is the quality that most frequently makes for success.”</p><p>— Dale Carnegie, Motivational Expert</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次透過簡單首頁、分頁製作了第一個rails專案，了解到其中MVC的運作原理及routes與controller之間的關聯性，這次我們將延續上次的內容添加一些功能，並透過CRUD 中（Create、 Read、 Update、 Delete）C跟R的流程來建立專案，U和D的部分就暫時有機會的時候再說明了，現在就來做做看吧！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day20: 簡易Rails實作(上)</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2020/"/>
    <id>https://louiswuyj.site/鐵人賽Day 20/</id>
    <published>2019-10-03T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:15.301Z</updated>
    
    <content type="html"><![CDATA[<p>在開始之前，要先知道用Rails的慣例，並且盡量遵守才不會造成後面要接手的人的困擾。尤其是以下說明需特別注意：</p><a id="more"></a><blockquote><p>在檔案區命名：snakecase     ex: candidate_controller<br>在檔案內命名：camelcase     ex: CandidateController<br>且“檔案名稱”與“類別名稱”必須相同，才不會在執行的時候出現error</p></blockquote><h2 id="什麼是MVC-Model、View、Controller"><a href="#什麼是MVC-Model、View、Controller" class="headerlink" title="什麼是MVC(Model、View、Controller)?"></a>什麼是MVC(Model、View、Controller)?</h2><p>在開始建立Rails之前，我們需要先了解<a href="https://railsbook.tw/chapters/10-mvc.html" target="_blank" rel="noopener">什麼是MVC</a></p><p>MVC架構：由Route開始，到Controller結束。</p><ol><li>瀏覽器依據資源(resources)的設定，經由Route去找到Controller中，對應的action(method)。</li><li>視需要透過Model向資料庫取得資料後，處理完再與對應的View(.html.erb)做結合。</li><li>View處理完後再回傳給Controller，Controller再將結果轉交給瀏覽器。</li></ol><h2 id="建立Rails專案"><a href="#建立Rails專案" class="headerlink" title="建立Rails專案"></a>建立Rails專案</h2><p>在Terminal輸入，就會自動產生rails專案。（前提是要先安裝好Rails）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails new 專案名稱</span><br></pre></td></tr></table></figure><p>在這次的例子，我們試著產生一個名叫myvote的Rails檔案。</p><h3 id="routes-rb"><a href="#routes-rb" class="headerlink" title="routes.rb"></a>routes.rb</h3><p>在Vscode開啟資料夾，用command+P尋找檔案“routes.rb”，並寫入：</p><ol><li>Rails 提供的 resources</li><li>根目錄(首頁) candidates，且裡面有個方法index</li></ol><p><img src="https://i.imgur.com/Pmy0rCh.png" alt=""></p><p>第2行：產生8種條路徑</p><p><img src="https://i.imgur.com/xuSCyik.png" alt=""></p><p>第3行：根目錄裡有個方法index</p><p>備註：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root <span class="string">'candidates#index'</span></span><br><span class="line">get <span class="string">'/'</span>, to <span class="string">'candidates#index'</span></span><br><span class="line"><span class="comment">#因為是根目錄，以上兩種寫法都可以接受。</span></span><br></pre></td></tr></table></figure><p>在此時在Terminal執行Rails：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails server 或 rails s</span><br></pre></td></tr></table></figure><p>至網址輸入localhost:3000(Terminal會寫3000)出現以下畫面:</p><p><img src="https://i.imgur.com/qqJ4rG8.png" alt=""></p><p>找不到method，故要建立一個給它。</p><h2 id="建立Method"><a href="#建立Method" class="headerlink" title="建立Method"></a>建立Method</h2><p>在app &gt; controllers中新增檔案 “檔名_controller.rb” (此例檔名為candidates，需與你要連結的檔案名稱一樣)，並建立class 、繼承最原始的檔案“ApplicationController”：（其實此例的def index暫時不寫也沒關係）</p><p><img src="https://i.imgur.com/W6ty2NU.png" alt=""></p><p>但這樣還不夠，因為Rails的遊戲規則是要從views裡面找檔案，所以必須還要再 views 資料夾新增一個candidates資料夾，並建立 index.html.erb：</p><p><img src="https://i.imgur.com/vev7ekj.png" alt=""></p><p>才能印出：</p><p><img src="https://i.imgur.com/0rQWk3A.png" alt=""></p><p>基本上這樣就完成最最最基礎的第一步了(此例index裡沒寫東西只是因為要當範例而已，請原諒我沒放東西(跪)）</p><h2 id="讓他稍微可以動"><a href="#讓他稍微可以動" class="headerlink" title="讓他稍微可以動"></a>讓他稍微可以動</h2><p>在index.html.erb加點東西：</p><p><img src="https://i.imgur.com/4wcbTUc.png" alt=""></p><blockquote><p>Prefix :new_cadidates</p></blockquote><p>還記得剛剛的rails routes嗎？其中的new功能Rails已經有幫我們定義好的Prefix名字了</p><p><img src="https://i.imgur.com/0tz8JhD.png" alt=""></p><p>_path:產生相對應的路徑網址（站內路徑）-&gt; ／candidates</p><p>*另一種方式：</p><p>＿url:產生完整網址 -&gt; <a href="https://www.xxxx.com/candidates，在寄發mail的時候較常使用" target="_blank" rel="noopener">https://www.xxxx.com/candidates，在寄發mail的時候較常使用</a>)</p><p>套用Bootstrap，套用方式可見<a href="https://medium.com/@louiswu0327/%E5%9C%A8rails%E8%A3%9Dboostrap%E5%A5%97%E4%BB%B6-fcb742a10376" target="_blank" rel="noopener">這篇</a>。</p><h2 id="等等！！！views裡沒有new這個檔案啊！！？"><a href="#等等！！！views裡沒有new這個檔案啊！！？" class="headerlink" title="等等！！！views裡沒有new這個檔案啊！！？"></a>等等！！！views裡沒有new這個檔案啊！！？</h2><p>所以要記得在views &gt; candidates 裡再新增一個new.html.erb檔</p><p><img src="https://i.imgur.com/tFtIi8s.png" alt=""></p><p>這樣一來就可以有作用囉!!</p><p><img src="https://i.imgur.com/qhJJPAH.png" alt=""></p><p><img src="https://i.imgur.com/jmE6M2W.png" alt=""></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Rails這只是第一步而已，雖然現在有很多指令可以快速產出以上步驟做出的東西(scaffold)，但畢竟在使用套件之前，能夠先了解如何手刻及其背後觀念跟原理是非常重要的。</p><p>也許文章內容寫的不正確也缺乏系統，也或許幾年後回來看自己寫的這篇文章會覺得”WTF這什麼鬼!!?”</p><p>參考資料：<br><a href="https://railsbook.tw/chapters/11-routes.html#restful-routes" target="_blank" rel="noopener">為你自己學 Ruby on Rails</a></p><blockquote><p>“The pro is the person who has all the hassles, obstacles, and disappointing frustrations that everyone else has, yet continues to persist, does the job, and makes it look easy.”</p><p>— David Cooper, Sales Trainer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在開始之前，要先知道用Rails的慣例，並且盡量遵守才不會造成後面要接手的人的困擾。尤其是以下說明需特別注意：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day19: Rails中神奇的spring stop</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2019/"/>
    <id>https://louiswuyj.site/鐵人賽Day 19/</id>
    <published>2019-10-02T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:23.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day19-Rails中神奇的spring-stop"><a href="#Day19-Rails中神奇的spring-stop" class="headerlink" title="Day19: Rails中神奇的spring stop"></a>Day19: Rails中神奇的spring stop</h1><h4 id="您有遇過rails-g-migration時卡住嗎？"><a href="#您有遇過rails-g-migration時卡住嗎？" class="headerlink" title="您有遇過rails g migration時卡住嗎？"></a>您有遇過rails g migration時卡住嗎？</h4><a id="more"></a><h4 id="您有rails-sever打不開的問題嗎？"><a href="#您有rails-sever打不開的問題嗎？" class="headerlink" title="您有rails sever打不開的問題嗎？"></a>您有rails sever打不開的問題嗎？</h4><p><del>trivago</del></p><p>意外的查到的資料不多，所以這篇僅擷取Rails <a href="https://github.com/rails/spring/blob/master/README.md" target="_blank" rel="noopener">REARDME.md</a>來簡單翻譯一下。</p><h2 id="spring-stop"><a href="#spring-stop" class="headerlink" title="spring stop"></a>spring stop</h2><p>常常在跑rail時，都會遇到一些很奇怪的狀況導致migration, rails sever, rails db:seed等跑不出來這狀況，但只要下了<code>spring stop</code>通常就解了？</p><p>Rails在4.1版本後新增了<code>srping stop</code>功能，來看看rails guide寫什麼：</p><blockquote><p>Spring 會預加載你的 Rails 應用程式。保持應用程式在背景執行，如此一來在執行 Rails 命令時：如跑測試、rake、migrate 時，不用每次都重啟 Rails 應用程式，加速你的開發流程。</p></blockquote><p>簡單來說就是應用程式預加載器，就像加速器一樣的概念。</p><h2 id="spring-stop的特性"><a href="#spring-stop的特性" class="headerlink" title="spring stop的特性"></a>spring stop的特性</h2><ol><li>在背景自動執行，只開啟終端機並進入rails資料夾就會自動執行</li><li>每次執行時重新載入你的rails專案中的code</li><li>當config、initializer、gem dependencies有更新時重新啟動</li></ol><h2 id="spring-stop的運行"><a href="#spring-stop的運行" class="headerlink" title="spring stop的運行"></a>spring stop的運行</h2><p>建立一個新的Rails專案並執行<code>rails generate scaffold post name:string</code></p><p>打開終端機測試一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ time bin/rake <span class="built_in">test</span> <span class="built_in">test</span>/controllers/posts_controller_test.rb</span><br><span class="line">Running via Spring preloader <span class="keyword">in</span> process 2734</span><br><span class="line">Run options:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running tests:</span></span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">Finished tests <span class="keyword">in</span> 0.127245s, 55.0121 tests/s, 78.5887 assertions/s.</span><br><span class="line"></span><br><span class="line">7 tests, 10 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">real    0m2.165s</span><br><span class="line">user    0m0.281s</span><br><span class="line">sys     0m0.066s</span><br></pre></td></tr></table></figure><p>跑的速度不算特別快，因為是第一次執行這個專案，所以花的時間會比較長</p><p>來看一下spring的狀態：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ bin/spring status</span><br><span class="line">Spring is running:</span><br><span class="line"></span><br><span class="line">26150 spring server | spring-demo-app | started 3 secs ago</span><br><span class="line">26155 spring app    | spring-demo-app | started 3 secs ago | <span class="built_in">test</span> mode</span><br></pre></td></tr></table></figure><p>再跑一次就可以發現速度快很多：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ time bin/rake <span class="built_in">test</span> <span class="built_in">test</span>/controllers/posts_controller_test.rb</span><br><span class="line">Running via Spring preloader <span class="keyword">in</span> process 8352</span><br><span class="line">Run options:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running tests:</span></span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">Finished tests <span class="keyword">in</span> 0.176896s, 39.5714 tests/s, 56.5305 assertions/s.</span><br><span class="line"></span><br><span class="line">7 tests, 10 assertions, 0 failures, 0 errors, 0 skips</span><br><span class="line"></span><br><span class="line">real    0m0.610s</span><br><span class="line">user    0m0.276s</span><br><span class="line">sys     0m0.059s</span><br></pre></td></tr></table></figure><p>在coding時做的變更，會根據你在更新哪個檔案去判別是否要重新啟動後台。</p><p>舉例來說當我們修改application file或是test file時，相關的變更會再下一次執行時變更，你只需要重新刷瀏覽器，但後台系統不必重新啟動。</p><p>但當如果我們修改啟動應用程式所需的檔案，例如：configs, initializers, gemfile時，則後台需要重新啟動應用程式，而且會自動執行。</p><p>例如編輯<code>config/application.rb</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch config/application.rb</span><br><span class="line">$ bin/spring status</span><br><span class="line">Spring is running:</span><br><span class="line"></span><br><span class="line">26150 spring server | spring-demo-app | started 36 secs ago</span><br><span class="line">26556 spring app    | spring-demo-app | started 1 sec ago | <span class="built_in">test</span> mode</span><br></pre></td></tr></table></figure><p>spring會偵測到config底下有檔案被更新後，就會自動啟動。</p><hr><p>也許是spring的關係，所以常常會將我們不需要的東西先預載入到後台，導致我們在執行migration, rails s等會發生問題，所以才會需要下<code>spring stop</code>來終止預先載入的行為。</p><p>這只是我的推測…如果有錯的話歡迎指正。</p><p>參考資料：</p><p><a href="https://github.com/rails/spring/blob/master/README.md" target="_blank" rel="noopener">Rails/spring/REARDME.md</a><br><a href="https://rails.ruby.tw/4_1_release_notes.html#%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%A0%90%E5%8A%A0%E8%BC%89%E5%99%A8%EF%BC%9Aspring" target="_blank" rel="noopener">Ruby on Rails 4.1 發佈記</a></p><blockquote><p>“If you really want something, you have to be prepared to work very hard, take advantage of opportunity, and above all never give up.”</p><p>— Jane Goodall, Ethologist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Day19-Rails中神奇的spring-stop&quot;&gt;&lt;a href=&quot;#Day19-Rails中神奇的spring-stop&quot; class=&quot;headerlink&quot; title=&quot;Day19: Rails中神奇的spring stop&quot;&gt;&lt;/a&gt;Day19: Rails中神奇的spring stop&lt;/h1&gt;&lt;h4 id=&quot;您有遇過rails-g-migration時卡住嗎？&quot;&gt;&lt;a href=&quot;#您有遇過rails-g-migration時卡住嗎？&quot; class=&quot;headerlink&quot; title=&quot;您有遇過rails g migration時卡住嗎？&quot;&gt;&lt;/a&gt;您有遇過rails g migration時卡住嗎？&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day18: 淺談Rails的表單: form_with</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2018/"/>
    <id>https://louiswuyj.site/鐵人賽Day 18/</id>
    <published>2019-10-01T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:37.966Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>form內 <strong>有</strong> model實體時，用<code>form_for</code>，主要用於新增或修改。</p><p>form內 <strong>無</strong> model實體時，用<code>form_tag</code>，主要用於登入一筆資料。</p><p>Rails 5.1後，將兩者結合為<code>form_with</code></p></blockquote><a id="more"></a><p>上次提到了<code>form_tag</code>及<code>form_for</code>，在Rails 5.1之後結合為<code>form_with</code>，代表<code>form_with</code>結合了兩種form的特性，不論有無Model都可以使用。</p><h2 id="使用form-with製作表格"><a href="#使用form-with製作表格" class="headerlink" title="使用form_with製作表格"></a>使用form_with製作表格</h2><h3 id="製作對象有Model時："><a href="#製作對象有Model時：" class="headerlink" title="製作對象有Model時："></a>製作對象有Model時：</h3><p><img src="https://i.imgur.com/HtUBFGQ.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#products_controller.rb</span><br><span class="line">#@product = Product.new</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span> <span class="attr">model:</span> @<span class="attr">product</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>產出的html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/products"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">data-remote</span>=<span class="string">"true"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"zzGYG0KNdBU0pPfzO7QDBAWUkDcPE9czey2zv21TwaXXf5T01neGV4Hp2YwZJRUJ2doDyOrnm9ZH74Ql6Ky9Mg=="</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"product[title]"</span> <span class="attr">id</span>=<span class="string">"product_title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"Create Product"</span> <span class="attr">data-disable-with</span>=<span class="string">"Create Product"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="製作對象沒有Model時："><a href="#製作對象沒有Model時：" class="headerlink" title="製作對象沒有Model時："></a>製作對象沒有Model時：</h3><p><img src="https://i.imgur.com/hxLiPHw.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span> <span class="attr">url:</span> <span class="attr">new_product_path</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>產出的html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/products/new"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">data-remote</span>=<span class="string">"true"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"ZlLlHMOezGqsuZrFgovtKbph3uYPFcZuZbHyi1V6YEJ+HOnzV2Q+KBn0tLqgGvskZi9NGerhiotZc8UR0IUc1Q=="</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"Save "</span> <span class="attr">data-disable-with</span>=<span class="string">"Save "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>兩種方式產出的東西幾乎是相同的，因此可以得知我們只要根據專案的情況(有無Model)去設計<code>form_with</code>表單就好。</p><h2 id="data-remote-”true”"><a href="#data-remote-”true”" class="headerlink" title="data-remote=”true”"></a>data-remote=”true”</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/products/new"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">data-remote</span>=<span class="string">"true"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">....</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面兩個例子產出的html中，有一段<code>data-remote=&quot;true&quot;</code>是在<code>form_tag</code>及<code>form_for</code>沒有的。</p><p>有了這個屬性之後，表單會透過 Ajax 的方式提交，而不是瀏覽器平常的提交機制，若要設定不讓Ajax的方式提交，則要另訂 local: true。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#products_controller.rb</span><br><span class="line">#@product = Product.new</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span> <span class="attr">model:</span> @<span class="attr">product</span>, <span class="attr">local:</span> <span class="attr">true</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="form-with就算沒有Model的屬性也使用"><a href="#form-with就算沒有Model的屬性也使用" class="headerlink" title="form_with就算沒有Model的屬性也使用"></a>form_with就算沒有Model的屬性也使用</h2><h4 id="form-for"><a href="#form-for" class="headerlink" title="form_for"></a>form_for</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#products_controller.rb</span><br><span class="line">#@product = Product.new</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span> @<span class="attr">product</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.check_box</span> <span class="attr">:is_avalble</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/v3ceHy3.png" alt=""></p><h4 id="form-with"><a href="#form-with" class="headerlink" title="form_with"></a>form_with</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#products_controller.rb</span><br><span class="line">#@product = Product.new</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_with</span> <span class="attr">model:</span> @<span class="attr">product</span>, <span class="attr">local:</span> <span class="attr">true</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.check_box</span> <span class="attr">:is_avalble</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>產出的html:</p><p><img src="https://i.imgur.com/tYimKH2.png" alt=""></p><p>可以看得出來，就算Product這個Model裡沒有<code>is_avaliable</code>的屬性，還是可以用<code>form_with</code>寫出統一性的指令，而這個資料可用prodcut[is_avalible]收集。</p><h2 id="form-with在設定html時不用花括號"><a href="#form-with在設定html時不用花括號" class="headerlink" title="form_with在設定html時不用花括號{}"></a>form_with在設定html時不用花括號{}</h2><p><code>form_for</code>或<code>for_tag</code>若要設定html屬性，：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span> @<span class="attr">product</span>, <span class="attr">html:</span> &#123; <span class="attr">id:</span> “<span class="attr">product-id</span>”, <span class="attr">class:</span> “<span class="attr">product-type</span> &#125; <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br></pre></td></tr></table></figure><p><code>form_with</code>則不需要再寫花括號：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span> @<span class="attr">product</span>, <span class="attr">id:</span> “<span class="attr">product-id</span>”, <span class="attr">class:</span> “<span class="attr">product-type</span>  <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br></pre></td></tr></table></figure><hr><p>以上大概就是淺談<code>form_with</code>，其實<code>form_with</code>有很多的細節可以討論，請原諒小弟我僅提出最基本部分來討論…</p><p>參考資料：</p><p><a href="https://medium.com/@tinchorb/form-with-building-html-forms-in-rails-5-1-f30bd60ef52d" target="_blank" rel="noopener">form_with — Building HTML forms in Rails 5.1</a><br><a href="https://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field" target="_blank" rel="noopener">ActionView::Helpers::FormHelper</a></p><blockquote><p>“There’s no great loss without some small gain.”</p><p>– Laura Ingalls Wilder, Novelist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;form內 &lt;strong&gt;有&lt;/strong&gt; model實體時，用&lt;code&gt;form_for&lt;/code&gt;，主要用於新增或修改。&lt;/p&gt;
&lt;p&gt;form內 &lt;strong&gt;無&lt;/strong&gt; model實體時，用&lt;code&gt;form_tag&lt;/code&gt;，主要用於登入一筆資料。&lt;/p&gt;
&lt;p&gt;Rails 5.1後，將兩者結合為&lt;code&gt;form_with&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day17:  淺談Rails的表單: form_for? form_tag? </title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2017/"/>
    <id>https://louiswuyj.site/鐵人賽Day 17/</id>
    <published>2019-09-30T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:41.660Z</updated>
    
    <content type="html"><![CDATA[<p>在Rails中，常常會用到表單(form)將資料傳入資料庫，其中在Rails 5.1版本之前，常用的就是<code>form_tag</code>與<code>form_for</code>，我們來看看他們的分別該在何時使用：</p><a id="more"></a><p>先說結論：</p><blockquote><p>form內 <strong>有</strong> model實體時，用<code>form_for</code>，主要用於新增或修改。</p><p>form內 <strong>無</strong> model實體時，用<code>form_tag</code>，主要用於登入一筆資料。</p><p>Rails 5.1後，將兩者結合為<code>form_with</code></p></blockquote><p>關於<code>form_with</code>，有機會我再來對它做補充，這次先針對<code>form_for</code>及<code>form_tag</code>。</p><h2 id="form-for"><a href="#form-for" class="headerlink" title="form_for"></a>form_for</h2><p>form內<strong>有</strong>model實體時，用<code>form_for</code>，Rails會根據Model的屬性，自動判斷按下submit後，是要新增還是更新Model裡的資料。</p><p>翻譯蒟蒻：有媽豆的實體就用form_for</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#products_controller.rb</span><br><span class="line">#@product = Product.new</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_for</span> @<span class="attr">product</span> <span class="attr">do</span> |<span class="attr">form</span>| %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.text_field</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">form.submit</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/b9HI20l.png" alt=""></p><p>html會幫你產生</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"new_product"</span> <span class="attr">id</span>=<span class="string">"new_product"</span> <span class="attr">action</span>=<span class="string">"/products"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"**utf8**"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"**authenticity_token**"</span> <span class="attr">value</span>=<span class="string">"kxDHc4ID2xFAfBXANcrXBpqtI/</span></span></span><br><span class="line"><span class="tag"><span class="string">6rerAkMBaCh64j+O6LXsucFvkpU/UxO78XW8ELRuOwAU6O/MEM1LUdK9yEeQ=="</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"product[title]"</span> <span class="attr">id</span>=<span class="string">"product_title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"Create Product"</span> <span class="attr">data-disable-with</span>=<span class="string">"Create Product"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>來簡單看看上面程式碼：<br>第一個 name 屬性為 utf8 的 input，強制瀏覽器正確採用表單指定的編碼。<br>第二個 name 屬性為 authenticity_token 的 input，<br>是 Rails 內建用來防止 CSRF (cross-site request forgery protection) 攻擊的安全機制。</p><p>為何要有這樣的保護機制: <a href="https://blog.techbridge.cc/2017/02/25/csrf-introduction/" target="_blank" rel="noopener">CSRF跨站請求偽造 Cross-site request forgery</a></p><p>這樣設定好整個表格，就是為了將@product這個ActiveRecord資料而設定的，所以表格送出的params會將我們在表格內填的變數，整個包在product物件下面，才會需要使用Strong Parameter那樣的機制將product變數抽出做permit(避免CSRF攻擊)：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_params</span></span></span><br><span class="line">  params.<span class="keyword">require</span>(<span class="symbol">:product</span>).permit(<span class="symbol">:title</span>, <span class="symbol">:password</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="form-tag"><a href="#form-tag" class="headerlink" title="form_tag"></a>form_tag</h2><p>form內<strong>無</strong>model實體時，用<code>form_tag</code>，得指定要傳入哪個連結的<code>action</code>來進行表單資料的傳送。</p><p>翻譯蒟蒻：沒有媽豆的時候就只能用form_tag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">form_tag</span> <span class="attr">url:new_product_path</span> <span class="attr">do</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">text_field_tag</span> <span class="attr">:title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">submit_tag</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/T7EvkLF.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/products/new?url=%2Fproducts"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"✓"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"lfORCE9tuYA4Yuda6EziGw</span></span></span><br><span class="line"><span class="tag"><span class="string">KMQk9flV9dkM4ogaEzmUCNvZ3n25dLwo0vySXK3fQW3sLRsLphE7isDB8bJMzl1w=="</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"Save changes"</span> <span class="attr">data-disable-with</span>=<span class="string">"Save changes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是使用form_tag，變數就不會包在任何東西內，可以直接在controller當中取用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span></span></span><br><span class="line">  @products = Product.where(<span class="symbol">product:</span> params[<span class="symbol">:search</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>參考資料：</p><p><a href="https://apidock.com/rails/ActionView/Helpers/FormTagHelper/form_tag" target="_blank" rel="noopener">Ruby API: form_tag</a><br><a href="https://ithelp.ithome.com.tw/articles/10221234" target="_blank" rel="noopener">Ruby API: form_for</a><br><a href="https://m.patrikonrails.com/rails-5-1s-form-with-vs-old-form-helpers-3a5f72a8c78a" target="_blank" rel="noopener">Rails 5.1’s form_with vs. form_tag vs. form_for</a><br><a href="https://motion-express.com/blog/rails-form-tag-form-for" target="_blank" rel="noopener">form_tag 是啥？跟 form_for 有什麼不一樣？</a></p><blockquote><p>“A man can get discouraged many times, but he is not a failure until he begins to blame somebody else and stops trying.”</p><p>— John Burroughs, Writer</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Rails中，常常會用到表單(form)將資料傳入資料庫，其中在Rails 5.1版本之前，常用的就是&lt;code&gt;form_tag&lt;/code&gt;與&lt;code&gt;form_for&lt;/code&gt;，我們來看看他們的分別該在何時使用：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day16: 淺談Rails裡的resources</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2016/"/>
    <id>https://louiswuyj.site/鐵人賽Day 16/</id>
    <published>2019-09-29T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:49.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="resources"><a href="#resources" class="headerlink" title="resources:"></a>resources:</h2><p>可以一次新8條路徑，7個方法，當然也可以一條一條自己新增(get, post)，但若剛好你要做的專案需要這8條路徑的話，用這種內建方式做可以省去不少時間且也會更有系統。</p><a id="more"></a><p>如果resources後面沒加s，在路徑的部分會有些action就不需要帶id，但會少一個路徑。</p><h4 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h4><p><img src="https://i.imgur.com/nPCHhiK.png" alt=""></p><h4 id="resources-1"><a href="#resources-1" class="headerlink" title="resources"></a>resources</h4><p><img src="https://i.imgur.com/89Y6Om2.png" alt=""></p><h2 id="RESTful-的網址設計："><a href="#RESTful-的網址設計：" class="headerlink" title="RESTful 的網址設計："></a>RESTful 的網址設計：</h2><p>導入 REST 的設計，可讓網址變得更直觀，而且也幫開發人員訂了一套網址設計的慣例。</p><p>在Terminal裡輸入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails routes</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Woqdb5V.png" alt=""></p><p>青藍色框：Prefix要的名稱<br>黃色框：網址後會產生的path<br>紅色框：路由</p><p>或是可以去網址打localhost:3000/這邊可以亂打</p><p>也可以看到路徑(我很懶..幾乎都用這個方式在查)</p><p><img src="https://i.imgur.com/QGhedW0.png" alt=""></p><p>可以一個指令產生這麼多東西！！！真的很方便，但如果剛好你不需要某些路由想要去除的話，可以用以下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resources :candidates, only: [:new, :show] -&gt; 只要路由new跟show</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">resources :candidates, except: [:new]      -&gt;8個都要除了路由new</span><br></pre></td></tr></table></figure><p>根據你要其中的幾個路由去決定要用only還是expect，若要較少的時候用only較適合，反之要多的路由就用expect。</p><p>抱歉這次文章品質實在很差…</p><p>我是在跟未來的自己抱歉</p><p>反正……</p><h1 id="又沒人會看-誤"><a href="#又沒人會看-誤" class="headerlink" title="又沒人會看(誤"></a>又沒人會看(誤</h1><blockquote><p>“A hero is an ordinary individual who finds the strength to persevere and endure in spite of overwhelming obstacles.”</p><p>— Christopher Reeve, Actor</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;resources&quot;&gt;&lt;a href=&quot;#resources&quot; class=&quot;headerlink&quot; title=&quot;resources:&quot;&gt;&lt;/a&gt;resources:&lt;/h2&gt;&lt;p&gt;可以一次新8條路徑，7個方法，當然也可以一條一條自己新增(get, post)，但若剛好你要做的專案需要這8條路徑的話，用這種內建方式做可以省去不少時間且也會更有系統。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day15: Rails中的Gemfile</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2015/"/>
    <id>https://louiswuyj.site/鐵人賽Day 15/</id>
    <published>2019-09-28T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:53.037Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/P3tMB5y.png" alt=""></p><a id="more"></a><p>在Ruby的宇宙裡，有很多用Ruby寫成的套件包或是框架可以使用，包含rails也是(第6行)。</p><p>Gemfile是Rails new一個新專案時附加的檔案(如上圖rails 5.2.3)，主要管理此Rails專案該會使用哪些gem檔案及版本號，在跑<code>bundle install</code>時就會安裝到這個專案，所以可以視為紀錄這個專案該使用哪些gem的檔案，讓專案被其他使用者pull下來時，都能根據Gemfile裡的gem去安裝。</p><h2 id="裡面怎麼那麼多東西？"><a href="#裡面怎麼那麼多東西？" class="headerlink" title="裡面怎麼那麼多東西？"></a>裡面怎麼那麼多東西？</h2><p>讓我們來稍微檢視一下，預設的Gemfile到底有哪些東西，分別是做什麼用的？(抱歉可能沒辦法一個一個檢視…)</p><p>告訴Rails該去哪裡抓Gem下來用，預設為 rubygems.org</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &quot;https://rubygems.org”</span><br></pre></td></tr></table></figure><p>還會再多設置一個GitHub的URL當做備用來源 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git_source(:github) &#123; |repo| &quot;https://github.com/#&#123;repo&#125;.git” &#125;</span><br></pre></td></tr></table></figure><h3 id="版本號"><a href="#版本號" class="headerlink" title="版本號"></a>版本號</h3><p>在ruby gem常常會看到後面接”數字.數字.數字“，可以解讀為：<br>“#{major}.#{minor}.#{build}”</p><blockquote><p>主要版號(major)：功能大改，公開的 API 做了不少修正，通常沒辦法向下不相容<br>次要版號(minor)：加了某些新功能，但不影響其它功能，向下相容<br>修訂版號(build)：對現有的功能做了小幅度的修正，可向下相容</p><p>by Ruby 語法放大鏡</p></blockquote><p>像最近rails從5.2.3更新為6.0.0，就是很大改版，就要相對注意相容性的問題。</p><h3 id="gem的版本號"><a href="#gem的版本號" class="headerlink" title="gem的版本號"></a>gem的版本號</h3><p>可以看到有些gem的後面有加<code>~&gt;</code> <code>3.2.1</code> <code>&gt;=</code>或沒加等等這幾種：</p><ul><li><p>gem後沒加：安裝最新的”穩定”版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;kaminari&apos;</span><br></pre></td></tr></table></figure></li><li><p>‘ ‘：指定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &quot;rails&quot;, &apos;5.2.3&apos;</span><br></pre></td></tr></table></figure></li><li><p>“&gt;=, &lt;：安裝含1.1版本以上 ~ 不包含1.1.4版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;pg&apos;, &apos;&gt;= 1.1&apos;, &apos;&lt; 1.1.4&apos;</span><br></pre></td></tr></table></figure></li><li><p>~&gt;：算是縮寫，使用1.9版本以上，但2.0以下(不包括2.0)的最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;omniauth&apos;, &apos;~&gt; 1.9&apos;</span><br><span class="line"></span><br><span class="line">#等同於</span><br><span class="line"></span><br><span class="line">gem &apos;omniauth&apos;, &apos;&gt;= 1.9&apos;, &apos;&lt; 2.0&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Gemfile的Grop"><a href="#Gemfile的Grop" class="headerlink" title="Gemfile的Grop"></a>Gemfile的Grop</h3><p>大約分為三種，Product（上線/發佈）, Development（開發）, Test（測試）。</p><p>Product 上線 / 發佈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem &apos;rails&apos;, &apos;~&gt; 5.2.3&apos;</span><br><span class="line"></span><br><span class="line">沒有在grop裡代表上線/發佈時才會使用到</span><br></pre></td></tr></table></figure><p>Development（開發）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group :development do</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">寫在Development，這裡的 gem 會在開發時使用，上線時不會用</span><br></pre></td></tr></table></figure><p>Test (測試）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group :test do</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">寫在Test裡，這裡的 gem 會在開發時使用，上線時不會用</span><br></pre></td></tr></table></figure><p>Development, Test（開發,測試）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group :development, :test do</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">寫在Development裡, Test，這裡的 gem 會在開發及測試時使用，上線時不會用</span><br></pre></td></tr></table></figure><p>參考資料：<br><a href="https://tosbourn.com/what-is-the-gemfile/" target="_blank" rel="noopener">What is a Gemfile?</a><br><a href="https://kaochenlong.com/2016/05/02/gemfile/" target="_blank" rel="noopener">Ruby 語法放大鏡</a></p><blockquote><p>“If you’re walking down the right path and you’re willing to keep walking, eventually you’ll make progress.”</p><p>— Barack Obama, the 44th U.S. President</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/P3tMB5y.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day14: 淺談Model資料表關聯</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2014/"/>
    <id>https://louiswuyj.site/鐵人賽Day 14/</id>
    <published>2019-09-27T04:10:40.000Z</published>
    <updated>2019-10-24T11:40:57.522Z</updated>
    
    <content type="html"><![CDATA[<p>不管用哪個程式語言或框架寫網站，多數會有資料庫的應用，資料與資料之間一定會有關聯性，那要如何在不同Model設立資料關係，這裏會用很簡單的例子去試著理解什麼是資料表關聯。</p><a id="more"></a><h2 id="Active-Record"><a href="#Active-Record" class="headerlink" title="Active Record"></a>Active Record</h2><p>根據手冊：「Active Record 是 MVC 的 M（Model），表現商業邏輯與資料的層級，負責新增與操作需要持久存在資料庫裡的資料」</p><p>看起來有點抽象，在我的理解大概就是這個概念：</p><p>Active Record ＝ 把資料做成物件（是一種ORM框架）<br>物件 = 欄位 + 基本操作 + 商業邏輯</p><p>這樣寫似乎還是有點抽象，但其實可以想像成：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model = ActiveRecord.new</span><br></pre></td></tr></table></figure><h2 id="用店面舉例"><a href="#用店面舉例" class="headerlink" title="用店面舉例"></a>用店面舉例</h2><p>先預設我們有3個Model:</p><ul><li>Owner</li><li>Stroe</li><li>Product</li></ul><p><img src="https://i.imgur.com/DLbomd0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o1 = Owner.create(name: &apos;Louis&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/rNoho2g.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = Store.new(title: &apos;Louis Shop&apos;)</span><br><span class="line">此時s1的owner_id還是空的</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/80ze79M.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o1.store = s1</span><br><span class="line">把 Store 指定給 Owner</span><br><span class="line">s1的Owner_id就有3了</span><br></pre></td></tr></table></figure><h3 id="可用-create-本身包含-save"><a href="#可用-create-本身包含-save" class="headerlink" title="可用 create (本身包含.save)"></a>可用 create (本身包含.save)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o1 = Owner.create(name: &apos;Sherly&apos;)</span><br><span class="line">o1.create_store(title: &apos;Ruby Shop&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4e05pKT.png" alt=""></p><h3 id="用build-本身不包含save"><a href="#用build-本身不包含save" class="headerlink" title="用build(本身不包含save)"></a>用build(本身不包含save)</h3><p>還未.save前，可看到shop的id是空的</p><p><img src="https://i.imgur.com/wHv2AtF.png" alt=""></p><p>.save後</p><p><img src="https://i.imgur.com/owsFscG.png" alt=""><br><img src="https://i.imgur.com/D85OzMh.png" alt=""></p><h3 id="用new不會存進資料庫，必須額外-save"><a href="#用new不會存進資料庫，必須額外-save" class="headerlink" title="用new不會存進資料庫，必須額外.save"></a>用new不會存進資料庫，必須額外.save</h3><p><img src="https://i.imgur.com/GDgtmVc.png" alt=""></p><h3 id="用另一個角度"><a href="#用另一個角度" class="headerlink" title="用另一個角度"></a>用另一個角度</h3><p>只要有任一方有存入資料庫，就可以設定關聯性，不須雙方都存入資料庫</p><p><img src="https://i.imgur.com/cmkkdZf.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.create_store =&gt; 直接寫入資料庫</span><br><span class="line">.build_store =&gt;  建立，但未寫入資料庫</span><br></pre></td></tr></table></figure><h3 id="has-one"><a href="#has-one" class="headerlink" title="has_one"></a>has_one</h3><figure class="highlight plain"><figcaption><span>:store，產生以下四個方法:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(類似 Cat = Animail.new的概念)</span><br><span class="line">•store</span><br><span class="line">•store=</span><br><span class="line">•build_store</span><br><span class="line">•create_store</span><br></pre></td></tr></table></figure><h3 id="belongs-to"><a href="#belongs-to" class="headerlink" title="belongs_to"></a>belongs_to</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">belongs_to 也是一個類別方法</span><br><span class="line">執行belongs_to :owner，只有產生以下兩個方法:</span><br><span class="line">•owner</span><br><span class="line">•owner=</span><br></pre></td></tr></table></figure><h3 id="has-many"><a href="#has-many" class="headerlink" title="has_many"></a>has_many</h3><figure class="highlight plain"><figcaption><span>:products，只有產生以下四個方法:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">products</span><br><span class="line">products=</span><br><span class="line">build</span><br><span class="line">create</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#個別建立物件</span><br><span class="line">s1 = Store.first</span><br><span class="line">p1 = Product.new(name: &apos;iphone&apos;)</span><br><span class="line">p2 = Product.new(name: &apos;ipad&apos;)</span><br><span class="line"></span><br><span class="line">#方法一:可以一次塞入多個到s1</span><br><span class="line">s1.products = [p1, p2]</span><br><span class="line"></span><br><span class="line">#方法二:只能塞一個到s1</span><br><span class="line">s1.products.create(name: &apos;Mac&apos;)</span><br></pre></td></tr></table></figure><h3 id="has-many-through-多對多"><a href="#has-many-through-多對多" class="headerlink" title="has_many: through 多對多"></a>has_many: through 多對多</h3><p>跟has_many用起來差不多<br>需要第三方資料表來儲存兩邊資訊<br>第三方資料表通常只存放兩邊id，並且belong_to兩邊的Model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rails g WareHouse sotre:references product:references</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">rails g WareHouse sotre_id:<span class="built_in">integer</span> product_id:<span class="built_in">integer</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#store.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:ware_houses</span></span><br><span class="line">  has_many <span class="symbol">:products</span>, <span class="symbol">through:</span> <span class="symbol">:ware_houses</span> <span class="comment">#透過第三方</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#product.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &lt; ApplicationRecord</span></span><br><span class="line">  <span class="comment"># belongs_to :store</span></span><br><span class="line">  has_many <span class="symbol">:ware_houses</span></span><br><span class="line">  has_many <span class="symbol">:stores</span>, <span class="symbol">through:</span> <span class="symbol">:ware_houses</span> <span class="comment">#透過第三方</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = Store.first</span><br><span class="line">s2 = Store.second</span><br><span class="line">p1 = Product.first</span><br><span class="line">p2 = Product.second</span><br><span class="line">p3 = Product.third</span><br></pre></td></tr></table></figure><p>試著建立這樣的關係：</p><p><img src="https://i.imgur.com/fCOx69y.png" alt=""></p><p><img src="https://i.imgur.com/Nn24Kip.png" alt=""><br><img src="https://i.imgur.com/mGlKdse.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下圖:</span><br><span class="line">p2.stores -&gt;p2商品再哪間店有貨</span><br><span class="line">s1.owner  -&gt;s1店面的店長是誰</span><br><span class="line">s2.products -&gt; s2店面有哪些商品</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/I6R7ybA.png" alt=""></p><p>參考資料：<br><a href="https://railsbook.tw/chapters/16-model-basic.html" target="_blank" rel="noopener">Model 基本操作</a></p><blockquote><p>“I realized early on that success was tied to not giving up. Most people in this business gave up and went on to other things. If you simply didn’t give up, you would outlast the people who came in on the bus with you.”</p><p>— Harrison Ford, Actor</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管用哪個程式語言或框架寫網站，多數會有資料庫的應用，資料與資料之間一定會有關聯性，那要如何在不同Model設立資料關係，這裏會用很簡單的例子去試著理解什麼是資料表關聯。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day13: Ruby on Rails 的 .nil? .empty? .blank? .present? </title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2013/"/>
    <id>https://louiswuyj.site/鐵人賽Day 13/</id>
    <published>2019-09-26T04:10:40.000Z</published>
    <updated>2019-10-24T11:41:02.996Z</updated>
    
    <content type="html"><![CDATA[<p>在Ruby on Rails有很多神奇又好用的黑魔法，但有幾個類似的方法會搞不清楚到底在哪個狀況時要用哪個method…</p><a id="more"></a><p>我在寫rails的時候曾經踩過一個小雷：<br><img src="https://i.imgur.com/TAhp77y.png" alt=""></p><p>現在這個使用者的name欄位是空的，所以回傳的是<code>nil</code>，如果此時在<code>current_user.name</code>後接的是<code>.empty?</code>就會噴錯，所以要用<code>.nil?</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> current_user.name.<span class="literal">nil</span>?   <span class="comment">#原本寫的是.empty?</span></span><br><span class="line">      redirect_to edit_user_registration_path</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">#下略</span></span><br></pre></td></tr></table></figure><h2 id="Ruby-nil-empty"><a href="#Ruby-nil-empty" class="headerlink" title="Ruby - .nil? .empty?"></a>Ruby - .nil? .empty?</h2><h3 id="nil"><a href="#nil" class="headerlink" title=".nil?"></a>.nil?</h3><p>還記得有句快說到爛的話，「在Ruby幾乎所有東西都是物件，除了block」，所以nil也是物件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span>.<span class="keyword">class</span></span><br><span class="line">=&gt; NilClass</span><br><span class="line"></span><br><span class="line"><span class="literal">nil</span>.<span class="literal">nil</span>? </span><br><span class="line">=&gt; true </span><br><span class="line"></span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line">a.<span class="literal">nil</span>? = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span>.<span class="literal">nil</span>? </span><br><span class="line">=&gt; false</span><br><span class="line"></span><br><span class="line"><span class="literal">false</span>.<span class="literal">nil</span>? </span><br><span class="line">=&gt; false</span><br><span class="line"></span><br><span class="line">[].<span class="literal">nil</span>? </span><br><span class="line">=&gt; false</span><br></pre></td></tr></table></figure><p>可以很簡單地看出結果，只要<code>.nil?</code>之前接的物件是<code>nil</code>的話會回傳<code>true</code>，其他則都會回傳<code>flase</code>。</p><h3 id="empty"><a href="#empty" class="headerlink" title=".empty?"></a>.empty?</h3><p><code>.empty</code>方法前面是針對<code>string</code> <code>array</code> <code>hash</code>使用，如果這三種物件的長度為0 (legth == 0)的話，就會回傳<code>true</code>否則回傳<code>flase</code>。</p><p>另一種情況，如果<code>.empty?</code>前接的不是這三種物件的話，則會噴<code>undefined method empty?。</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>.empty? </span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line">[].empty? </span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line">[ ].empty? </span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">" "</span>.empty?        <span class="comment">#空白字串也有長度</span></span><br><span class="line">=&gt; false</span><br><span class="line"></span><br><span class="line"><span class="literal">nil</span>.empty? </span><br><span class="line"><span class="symbol">NoMethodError:</span> undefined method <span class="string">`empty?' for nil:NilClass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">false.empty? </span></span><br><span class="line"><span class="string">NoMethodError: undefined method `</span>empty?<span class="string">' for false:FalseClass</span></span><br></pre></td></tr></table></figure><h2 id="Rails-blank-present"><a href="#Rails-blank-present" class="headerlink" title="Rails - .blank? .present?"></a>Rails - .blank? .present?</h2><h3 id="blank"><a href="#blank" class="headerlink" title=".blank?"></a>.blank?</h3><p><code>.blank?</code>是一個<code>ActiveRecord method</code>，針對 <code>nil</code> <code>string</code> <code>array</code> <code>hash</code> 使用，在 <code>false</code> <code>nil</code> <code>empty</code>或<strong>空白</strong>字串(不是length == 0)時會回傳 true，否則回傳<code>false</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>.blank?</span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line"><span class="literal">nil</span>.blank?</span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line"><span class="string">""</span>.blank? </span><br><span class="line">=&gt; true </span><br><span class="line"></span><br><span class="line"><span class="string">" "</span>.blank? </span><br><span class="line">=&gt; true            <span class="comment">#(跟.empty?不同)</span></span><br><span class="line"></span><br><span class="line">[].blank? </span><br><span class="line">=&gt; true</span><br><span class="line"></span><br><span class="line">&#123;&#125;.blank?</span><br><span class="line">=&gt; true</span><br></pre></td></tr></table></figure><h3 id="present"><a href="#present" class="headerlink" title=".present?"></a>.present?</h3><p><code>.present?</code>來自·<code>Active Record</code>，其實就是.blank?的相反用法，換句話說就是：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!object.blank? == object.present?</span><br></pre></td></tr></table></figure><p>參考資料：<br><a href="https://jamestong10.github.io/blog/2016/09/01/rails-i18n-timezone/" target="_blank" rel="noopener">Rails I18n 多語系</a><br><a href="https://medium.com/le-wagon/how-to-use-nil-blank-present-exists-in-rails-5-fe03e78ab979" target="_blank" rel="noopener">How to use .nil? .empty? .blank? .present? in Rails 5</a><br><a href="https://mgleon08.github.io/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/" target="_blank" rel="noopener">.nil? .empty? .blank? .present? 傻傻分不清楚？</a><br><a href="https://ruby-doc.org/core-2.6.4/Object.html" target="_blank" rel="noopener">Ruby API</a></p><blockquote><p>“The two most powerful warriors are patience and time.”</p><p>— Leo Tolstoy, Novelist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ruby on Rails有很多神奇又好用的黑魔法，但有幾個類似的方法會搞不清楚到底在哪個狀況時要用哪個method…&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day12: Ruby的例外處理(Exceptions)：begin...rescue ...end</title>
    <link href="https://louiswuyj.site/%E9%90%B5%E4%BA%BA%E8%B3%BDDay%2012/"/>
    <id>https://louiswuyj.site/鐵人賽Day 12/</id>
    <published>2019-09-25T04:10:40.000Z</published>
    <updated>2019-10-24T11:41:06.123Z</updated>
    
    <content type="html"><![CDATA[<p>幾乎每個程式語言都有例外處理的功能，當程式在執行時，不免都會遇到非工程師預期的狀況發生，我們可以針對不同例外訊息設計不同的例外處理。</p><a id="more"></a><p>在Ruby例外處理的基本架構：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">#程式碼正常執行的地方 (可能出現例外的程式碼)</span></span><br><span class="line"><span class="keyword">rescue</span> </span><br><span class="line">  <span class="comment">#發生錯誤時執行的地方</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>當Ruby執行程式發生錯誤時，會丟出一個Error類別產生的例外物件並停止程式，各種錯誤類型用架構的方式歸納：</p><p><img src="https://i.imgur.com/AcWTC5W.png" alt=""><br>圖片來源:Programming Ruby book</p><p>有這麼多例外訊息的類別，要舉例可能舉不完，不過用起來大概像下面這種感覺：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> </span><br><span class="line">  <span class="comment"># 可能出現例外的程式碼</span></span><br><span class="line"><span class="keyword">rescue</span> SyntaxError</span><br><span class="line">  <span class="comment"># 出現SyntaxError時執行此行程式碼</span></span><br><span class="line"><span class="keyword">rescue</span> ArgumentError</span><br><span class="line">  <span class="comment"># 出現ArgumentError時執行此行程式碼</span></span><br><span class="line"><span class="keyword">rescue</span> RuntimeError</span><br><span class="line">  <span class="comment"># 出現RuntimeError時執行此行程式碼</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>所以可針對丟出的例外訊息，去處理該訊息的例外處理，當然最常見的還是<code>SyntaxError</code>, <code>ArgumentError</code>及<code>RuntimeError</code>。如果沒有在<code>rescue</code>後特別寫哪種類別的話，任何的錯誤類別都會被<code>rescue</code>給抓到。</p><p>在舉例之前，我想先說說該如何用raise來產生例外處理。</p><h2 id="raise"><a href="#raise" class="headerlink" title="raise"></a>raise</h2><p>一般在簡單的程式碼，比較不會有例外處理的狀況發生，但為了舉例，我們也可以透過手動產生例外處理來觸發我們想要的結果，那我們就可以用raise method來執行。</p><h3 id="raise是什麼？"><a href="#raise是什麼？" class="headerlink" title="raise是什麼？"></a>raise是什麼？</h3><blockquote><p>The raise method is from the Kernel module. By default, raise creates an exception of the RuntimeError class.</p></blockquote><p>raise是來自於Kernel這個module的method，”預設”會產生來自RuntimeError這個類別的exception實體。</p><p>既然是預設，代表我們一定可以自己寫raise method後會產生哪個類別的實體。</p><h4 id="預設：RuntimeError"><a href="#預設：RuntimeError" class="headerlink" title="預設：RuntimeError"></a>預設：RuntimeError</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">  puts <span class="string">'這邊是執行到raise之前'</span>  </span><br><span class="line">  raise <span class="string">'發生錯誤！'</span></span><br><span class="line">  puts <span class="string">'這邊是執行到raise之後'</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception</span><br></pre></td></tr></table></figure><p>印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">這邊是執行到raise之前</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">1: from test.rb:18:in `&lt;main&gt;&apos;</span><br><span class="line">test.rb:15:in `raise_exception&apos;: 發生錯誤！ (RuntimeError)</span><br><span class="line">                                           #預設類別</span><br></pre></td></tr></table></figure><h4 id="指定其他類別-以ArgumentError為例"><a href="#指定其他類別-以ArgumentError為例" class="headerlink" title="指定其他類別(以ArgumentError為例)"></a>指定其他類別(以ArgumentError為例)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">  puts <span class="string">'這邊是執行到raise之前'</span>  </span><br><span class="line">  raise ArgumentError, <span class="string">'發生錯誤！'</span></span><br><span class="line">  puts <span class="string">'這邊是執行到raise之後'</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception</span><br></pre></td></tr></table></figure><p>印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">這邊是執行到raise之前</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">1: from test.rb:18:in `&lt;main&gt;&apos;</span><br><span class="line">test.rb:15:in `raise_exception&apos;: 發生錯誤！ (ArgumentError)</span><br><span class="line">                                           #被指定類別</span><br></pre></td></tr></table></figure><h2 id="begin…rescue…end"><a href="#begin…rescue…end" class="headerlink" title="begin…rescue…end"></a>begin…rescue…end</h2><h4 id="預設Exception"><a href="#預設Exception" class="headerlink" title="預設Exception"></a>預設Exception</h4><p>程式執行時先印出”發生例外之前”，之後遇到<code>raise</code>發生例外，故去找<code>rescue</code>底下的程式碼並執行，印出”已處理例外”。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    puts <span class="string">'發生例外之前'</span>  </span><br><span class="line">    raise <span class="string">'發生例外！'</span>     <span class="comment">#沒指定Error類別，預設為RuntimeError</span></span><br><span class="line">    puts <span class="string">'發生例外之後'</span></span><br><span class="line">  <span class="keyword">rescue</span>                 <span class="comment">#預設RuntimeError，所有錯誤都會到這執行</span></span><br><span class="line">    puts <span class="string">'已處理例外'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception </span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; 發生例外之前</span></span><br><span class="line"><span class="comment">#    已處理例外</span></span><br></pre></td></tr></table></figure><h4 id="指定錯誤類別"><a href="#指定錯誤類別" class="headerlink" title="指定錯誤類別"></a>指定錯誤類別</h4><p>程式執行時先印出”發生例外之前”，之後遇到<code>raise</code>LoadError類別發生例外，因為已被指定是遇到LoadError產生的實體，rescue後並無指定要救援哪個類別，故印出”發生例外！ (LoadError)”。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    puts <span class="string">'發生例外之前'</span>  </span><br><span class="line">    raise LoadError, <span class="string">'發生例外！'</span></span><br><span class="line">    puts <span class="string">'發生例外之後'</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    puts <span class="string">'已處理例外'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception  </span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; 發生例外之前</span></span><br><span class="line"><span class="comment">#    發生例外！ (LoadError)</span></span><br></pre></td></tr></table></figure><p>若要修正，只要將rescue後加入該發生例外訊息時的類別就可以了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    puts <span class="string">'發生例外之前'</span>  </span><br><span class="line">    raise LoadError, <span class="string">'發生例外！'</span></span><br><span class="line">    puts <span class="string">'發生例外之後'</span></span><br><span class="line">  <span class="keyword">rescue</span> LoadError</span><br><span class="line">    puts <span class="string">'已處理例外'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception </span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; 發生例外之前</span></span><br><span class="line"><span class="comment">#    已處理例外</span></span><br></pre></td></tr></table></figure><p><strong>其實以上範例的<code>begin</code>跟<code>end</code>，可以被同時省略，只要留下<code>rescue</code>就可以正常執行，讓程式碼看起來更精簡，但對於金魚腦的我來說，為了方便未來能夠容易閱(理)讀(解)，還是不會把它們省略。</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raise_exception</span>  </span></span><br><span class="line">    puts <span class="string">'發生例外之前'</span>  </span><br><span class="line">    raise LoadError, <span class="string">'發生例外！'</span></span><br><span class="line">    puts <span class="string">'發生例外之後'</span></span><br><span class="line">  <span class="keyword">rescue</span> LoadError</span><br><span class="line">    puts <span class="string">'已處理例外'</span></span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">raise_exception </span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; 發生例外之前</span></span><br><span class="line"><span class="comment">#    已處理例外</span></span><br></pre></td></tr></table></figure><h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><p>其實這個主題可以寫出非常多東西，目前只針對自己可能會用到的部分做說明，如果有興趣的朋友可以到參考資料看更多關於Exceptions的介紹。</p><ol><li><code>begin...rescue...end</code>用來解決非預期的結果。<ul><li>begin…rescue: 可能發生例外的程式碼</li><li>rescue…end: 發生錯誤時執行的程式碼</li></ul></li><li>可針對丟出的例外訊息，去處理該訊息的例外處理。</li><li><code>begin</code> <code>end</code>可省略</li></ol><p>參考資料：<br><a href="https://ruby-doc.org/core-2.2.3/Kernel.html#method-i-raise" target="_blank" rel="noopener">Ruby Kernel</a><br><a href="http://rubylearning.com/satishtalim/ruby_exceptions.html" target="_blank" rel="noopener">Ruby Exceptions</a><br><a href="https://mgleon08.github.io/blog/2016/02/04/rescue-exception/" target="_blank" rel="noopener">例外處理 Rescue Exception, Error Handling, Custom Error Pages</a><br><a href="https://pjchender.github.io/2018/06/05/ruby-error-handling%EF%BC%88%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86%EF%BC%89/" target="_blank" rel="noopener">[Ruby] Error Handling（錯誤處理)</a><br><a href="https://medium.com/@eggyy1224/ruby-%E7%9A%84%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86%E6%A9%9F%E5%88%B6-106f829f280b" target="_blank" rel="noopener">Ruby 的例外處理機制</a><br><a href="https://medium.com/@pk60905/rails%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86%E6%A9%9F%E5%88%B6begin-rescue%E5%92%8Cexception-ab71156a24a2" target="_blank" rel="noopener">Rails的錯誤處理機制begin、rescue和Exception</a></p><blockquote><p>“The meaning of life is to find your gift. The purpose &gt;of life is to give it away.”</p><p>– Pablo Picasso, Artist</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;幾乎每個程式語言都有例外處理的功能，當程式在執行時，不免都會遇到非工程師預期的狀況發生，我們可以針對不同例外訊息設計不同的例外處理。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="鐵人賽" scheme="https://louiswuyj.site/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
